(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    209087,       4412]
NotebookOptionsPosition[    205284,       4286]
NotebookOutlinePosition[    205640,       4302]
CellTagsIndexPosition[    205597,       4299]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Boundary Crossing of Order Statistics Point Processes", "Title",
 CellChangeTimes->{{3.671777393926134*^9, 3.6717774591112213`*^9}}],

Cell["\<\
Supplementary material I: Simulation study and statistical applications\
\>", "Subtitle",
 CellChangeTimes->{{3.671777462873673*^9, 3.67177746915156*^9}, {
  3.671961961828145*^9, 3.671961972255975*^9}, {3.6798360001312428`*^9,
  3.679836009592894*^9}}],

Cell["\<\
Online accompaniement for the original research paper \
\[OpenCurlyDoubleQuote]Boundary Crossing of Order Statistics Point Processes\
\[CloseCurlyDoubleQuote]\
\>", "Subsubtitle",
 CellChangeTimes->{{3.6717774715538807`*^9, 3.671777543626483*^9}}],

Cell[CellGroupData[{

Cell["Simulation study and statistical applications", "Section",
 CellChangeTimes->{3.6719619843796263`*^9}],

Cell[TextData[{
 "The goal of this section is to show the statistical potential of the \
formulas associated to the survival function of the crossing time ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Tau]", "\[Beta]"], TraditionalForm]]],
 StyleBox[" ",
  FontSize->9],
 "given by"
}], "Text",
 CellChangeTimes->{{3.671962017722781*^9, 3.671962114212208*^9}, {
  3.6719622534245033`*^9, 3.671962268624855*^9}, {3.671962417039054*^9,
  3.671962677221168*^9}, {3.671963954492985*^9, 3.6719639621646757`*^9}, {
  3.676609260933024*^9, 3.676609310973427*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[DoubleStruckCapitalP]", "(",
     RowBox[{
      SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], ")"}], "=",
    RowBox[{"\[DoubleStruckCapitalE]",
     RowBox[{"{",
      RowBox[{
       RowBox[{
        SubscriptBox["A",
         RowBox[{"N", "(", "t", ")"}]], "[",
        RowBox[{
         RowBox[{"1", "\[VerticalLine]", " ",
          RowBox[{
           SubscriptBox["F", "t"], "(",
           SubscriptBox["\[Beta]", "1"], ")"}]}], ",", "...", ",",
         RowBox[{
          SubscriptBox["F", "t"], "(",
          SubscriptBox["\[Beta]",
           RowBox[{"N", "(", "t", ")"}]], ")"}]}], "]"}],
       SubscriptBox["\[DoubleStruckCapitalI]",
        RowBox[{"{",
         RowBox[{
          RowBox[{"N", "(", "t", ")"}], "\[LessEqual]", " ",
          RowBox[{
           RowBox[{"h", "(", "t", ")"}], "+", "\[Beta]"}]}], "}"}]]}],
      "}"}]}]}], TraditionalForm]]],
 "         (1)"
}], "Subsubsection",
 CellChangeTimes->{{3.672033067218235*^9, 3.672033178177718*^9}, {
  3.6720332304336843`*^9, 3.672033355655519*^9}, {3.6720333949433393`*^9,
  3.672033430862913*^9}, {3.6720334638456078`*^9, 3.672033465358493*^9}, {
  3.6720337540788603`*^9, 3.672033759757101*^9}, {3.67660931806637*^9,
  3.67660935867526*^9}}],

Cell["\<\
The survival function of the crossing time could be evaluated by using a \
Crude Monte Carlo procedure, \
\>", "Text",
 CellChangeTimes->{{3.672033520615197*^9, 3.672033596975853*^9}, {
   3.672033665202464*^9, 3.6720338433283367`*^9}, {3.672034808154673*^9,
   3.672034819287014*^9}, 3.6720492883841763`*^9, {3.672049389301653*^9,
   3.6720493896614122`*^9}, {3.676704777611229*^9, 3.676704778192457*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[DoubleStruckCapitalP]", "(",
     RowBox[{
      SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], ")"}], "=",
    RowBox[{"\[DoubleStruckCapitalE]",
     RowBox[{"{",
      SubscriptBox["\[DoubleStruckCapitalI]",
       RowBox[{"{",
        RowBox[{
         SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], "}"}]], "}"}]}]}],
   TraditionalForm]]],
 "         (2)"
}], "Subsubsection",
 CellChangeTimes->{{3.672049362737598*^9, 3.672049377139751*^9}, {
  3.676609330354219*^9, 3.67660933344699*^9}}],

Cell["\<\
However, we might face problem linked to rare event simulations. The variance \
of the CMC estimator will be of the same magnitude as the quantity of \
interest. Variance reduction techniques are typically used in those \
situations. The goal of this numerical study is to show that the Monte Carlo \
estimator based on formula (1) permits a reduction of the variance. We also \
discuss the relevance of formula (1) for statistical application. \
\>", "Text",
 CellChangeTimes->{{3.672049382559081*^9, 3.672049582860002*^9},
   3.676609426065765*^9}],

Cell["It is easily seen that ", "Text",
 CellChangeTimes->{{3.672033865826084*^9, 3.672033878728775*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Sigma]", "CMC"], TraditionalForm]]],
 "\[GreaterSlantEqual]",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Sigma]", "APMC"], TraditionalForm]]],
 ", "
}], "Subsubsection",
 CellChangeTimes->{{3.6720338879386997`*^9, 3.672033922293769*^9}, {
  3.672033958427475*^9, 3.672033971627737*^9}, {3.672034015396448*^9,
  3.672034052366253*^9}}],

Cell["\<\
see the paper for more details. The amplitude of the reduction is difficult \
to assess as it depends on the parameters of both the OSPP and the boundary.\
\>", "Text",
 CellChangeTimes->{{3.672034064560267*^9, 3.672034109031797*^9}, {
  3.6720341821902113`*^9, 3.672034243604459*^9}, {3.6720342862299833`*^9,
  3.6720342877975893`*^9}}],

Cell[TextData[{
 "consider a Polya-Lundberg process of parameter \[Lambda]>0, and b\
\[GreaterEqual]0. It corresponds to a linear birth process of rate ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "n"], TraditionalForm]]],
 "(t)=\[Lambda](1+bn)/(1+\[Lambda]t). The intensity of the mixed Poisson \
process is gamma distributed a priori \[CapitalGamma](1/b,\[Lambda]b), where \
1/b is the shape parameter and m is the mean parameter."
}], "Text",
 CellChangeTimes->{{3.6720342946477003`*^9, 3.6720343378713627`*^9},
   3.676712197466757*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "[",
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}],
  ";"}], "\[IndentingNewLine]",
 RowBox[{"Import", "[",
  "\"\</Users/pierrogoffard/Dropbox/PO/Article/AppellPolynomialClaudePO/\
FirstCrossingFirstMeeting/Mathematica/BoundaryCrossingOSPPBoundaryPackage.wl\>\
\"", "]"}], "\[IndentingNewLine]",
 RowBox[{
  RowBox[{"\[Lambda]", "=", "2"}], ";",
  RowBox[{"b", "=", "1"}], ";",
  RowBox[{"W", " ", "=", " ",
   RowBox[{"GammaDistribution", "[",
    RowBox[{
     RowBox[{"1", "/", "b"}], ",",
     RowBox[{"\[Lambda]", "*", "b"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.672034342648983*^9, 3.6720344093811502`*^9},
   3.6720498174419327`*^9, {3.672494316729412*^9, 3.672494319283586*^9}, {
   3.676608372010421*^9, 3.676608372570682*^9}, {3.6767121120977793`*^9,
   3.676712121369378*^9}, {3.676712209409429*^9, 3.6767122190842247`*^9}, {
   3.67671225067494*^9, 3.676712260186275*^9}, {3.676712401080298*^9,
   3.676712401633698*^9}, {3.676712517889176*^9, 3.6767125184175577`*^9}, {
   3.676712617290044*^9, 3.676712621611092*^9}, {3.676712747932176*^9,
   3.676712748309095*^9}}],

Cell["The time is assumed to flow as usual, and ", "Text",
 CellChangeTimes->{{3.67204838483162*^9, 3.672048393686092*^9}, {
  3.67660946866709*^9, 3.676609490207425*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Nu]", "=",
   RowBox[{"Function", "[",
    RowBox[{
     RowBox[{"{", "t", "}"}], ",", "t"}], "]"}]}],
  ";"}], "\[IndentingNewLine]",
 RowBox[{
  RowBox[{"Inverse\[Nu]", "=",
   RowBox[{"Function", "[",
    RowBox[{
     RowBox[{"{", "t", "}"}], ",", "t"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.672048399863901*^9, 3.67204845558593*^9}, {
   3.672048518522215*^9, 3.6720485250205507`*^9}, {3.6766083784519157`*^9,
   3.676608386266698*^9}, 3.677305603609256*^9}],

Cell["The shape of the upper boundary is polynomial", "Text",
 CellChangeTimes->{{3.672034422699531*^9, 3.6720344464666843`*^9}, {
  3.672048618677191*^9, 3.672048624405089*^9}, {3.676608479069133*^9,
  3.6766084794112787`*^9}, {3.676609498187168*^9, 3.676609502033821*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"h", "=",
   RowBox[{"Function", "[",
    RowBox[{
     RowBox[{"{", "t", "}"}], ",",
     RowBox[{"c", "*",
      RowBox[{"t", "^",
       RowBox[{"(", "d", ")"}]}]}]}], "]"}]}], ";"}], "\[IndentingNewLine]",
 RowBox[{
  RowBox[{"Inverseh", "=",
   RowBox[{"Function", "[",
    RowBox[{
     RowBox[{"{", "t", "}"}], ",",
     RowBox[{
      RowBox[{"(",
       RowBox[{"t", "/", "c"}], ")"}], "^",
      RowBox[{"(",
       RowBox[{"1", "/", "d"}], ")"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.672034454532625*^9, 3.6720345899384727`*^9}, {
   3.672048492954644*^9, 3.672048511906416*^9}, {3.672048602166678*^9,
   3.672048629485876*^9}, {3.6720486898338346`*^9, 3.672048709824336*^9}, {
   3.672053233214525*^9, 3.672053235855082*^9}, {3.6720536140521383`*^9,
   3.6720536557569017`*^9}, 3.6720632531214333`*^9, {3.67660839353555*^9,
   3.676608418101945*^9}, {3.6766084647251596`*^9, 3.6766084653514357`*^9}, {
   3.676712270771885*^9, 3.67671228266357*^9}, 3.6773056134390287`*^9}],

Cell["with parameters", "Text",
 CellChangeTimes->{{3.672034608113777*^9, 3.6720346131121187`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", "1"}], ";",
  RowBox[{"d", "=", "2"}], ";"}]], "Input",
 CellChangeTimes->{{3.672034617569684*^9, 3.6720346381289673`*^9}, {
  3.672046468883709*^9, 3.672046476514481*^9}, {3.672047618557722*^9,
  3.6720476198295918`*^9}, {3.672464440240217*^9, 3.672464440804634*^9}, {
  3.676608428867076*^9, 3.676608433290983*^9}, {3.676712285576255*^9,
  3.676712287526898*^9}}],

Cell["and starts at (0,\[Beta]), where", "Text",
 CellChangeTimes->{{3.672464453070303*^9, 3.6724644622852507`*^9}, {
  3.676608446478632*^9, 3.676608453280403*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Beta]", "=",
   RowBox[{"3", "/", "2"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.67246446598284*^9, 3.672464469893422*^9}, {
  3.676608436994926*^9, 3.676608440601994*^9}, {3.676608483766059*^9,
  3.67660848551927*^9}}],

Cell["The time horizon is set to ", "Text",
 CellChangeTimes->{{3.672047627007374*^9, 3.6720476355339317`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"t", "=", "2"}], ";"}]], "Input",
 CellChangeTimes->{{3.672047640807806*^9, 3.672047644622394*^9},
   3.672047693296019*^9}],

Cell["\<\
The following figure displays 5 trajectories from the studied OSPP up to time \
t, along with the upper boundary,\
\>", "Text",
 CellChangeTimes->{{3.6720477772680807`*^9, 3.672047836036212*^9}, {
  3.672048333812315*^9, 3.672048338332349*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*",
  RowBox[{
   RowBox[{"Trajectories", "=",
    RowBox[{"SampleMPTTTrajectory", "[",
     RowBox[{"W", ",", "\[Nu]", ",", "Inverse\[Nu]", ",", "t", ",", "5"}],
     "]"}]}], ";", "\[IndentingNewLine]",
   RowBox[{
    RowBox[{"PlotTrajectoriesMPTTUpperBoundary", "[",
     RowBox[{
     "Trajectories", ",", "h", ",", "\[Beta]", ",", "16", ",", "Large"}],
     "]"}], "\[IndentingNewLine]",
    RowBox[{"Export", "[",
     RowBox[{"\"\<OSPPTrajectoriesUpperBound.png\>\"", ",", "%"}], "]"}]}],
   ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.672048345560113*^9, 3.672048354677403*^9}, {
  3.672048531970606*^9, 3.672048539090556*^9}, {3.672048583981799*^9,
  3.672048594428561*^9}, {3.672048639270083*^9, 3.67204864465527*^9}, {
  3.6720487409962873`*^9, 3.672048752473631*^9}, {3.672048829372698*^9,
  3.67204886664669*^9}, {3.6721275556992397`*^9, 3.672127558403262*^9}, {
  3.6724903058194027`*^9, 3.672490310636072*^9}, {3.676608499259716*^9,
  3.676608513190825*^9}, {3.679834028779976*^9, 3.679834032561243*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJzFW3lYTlvbXw3qERKeJw2PyiOhNFA5OLS3eaqUcpQhQ0KmI3Pm0DGnSA5F
kSLzmCERRbMyVSdJJUOUOqnOVqpvH6+97nffXef1fdf7x+cf1+9ae9/3vdaz
9rp/v3vddZ316wQvZULIXhVC/v5/rNf7xwllXnbk+7/Zyyt1d+ieYAQsCR5z
rOrPqxRfz+47apTBXYrdthTkJ+5KovjXS8vMf69J/Y6rmOrAnBQlpSyKU+49
vJs16AnF3r5j2rmXP6P4Xuu+zWcX5VIcHZnUpNc9n2JWO/64y/kCis2TC248
NH1F8TPW5VPMpyKKF2osePLcqkSIj03PmxSvGfCaYpeRbsWlpaUU94vYNSnC
+C3FRU37n83b+I7ivps7R3g/fE/xxUOvfB93/UBx1HaVHb3WfKS41nPyhzlx
5RS3Gf7bhEudP1G8TutN2+KplRS3vWNGch2qKB68cnxjYj3gsBO7I7uF/Umx
x0SbzNbjqim+9txr/506wAMyLiq/DflMsdGIObX7h9dQbGtjG3T1LeBX1XtS
I/1rKS63dvbX7VtHsclH8w9KTwEnGa94ssTvL4r3PnvuOcGYo7jSJSFIOQnw
5YmyYQN8vlAcmbnlSEnHeor/Sp66tuN9wEVBd2u1FjdQXPf4Z93Nml8pXhKs
SPC9DbhzpkKr1KMRft/nZ7/KmwBXTz+2sOB0E8V3Z1zw17RvpvigYZva5mbA
W/x2rd6pG0z3d37twLvL2t2neLZeT1ULNpnuN6uu3Rsy1mRQbPtkRpTaUNiP
Ed2nF93dWwy/p0/xqKWvYH+asdMGq0eD/4TQRNs9ulupP33L+ZfGPUqguNBx
cyX35gHFA63d39kwYP/Q7TaZofaJdPzDm0wdz8MpNB41Ha8/xhbB80p1c7X7
B6ygz8el+52+bgH+9L0tvQr7gz/1gTnzK7WLqT2uzeZd5DiszzGb576d9j+k
44t6F3iumQv+LAZIo47ozqbPa9voO76Ih/NlYF0rI+cSOF8WxwefzVAGfzt7
XLg/eBr40x9qMrTc7CHFX1+4nV6wF+KNiO3cq6MZvL/5ZNOdiDKIT7vN84Ar
uq70+TnKJ8d2WAzxpA7yWa9xHeK5rFmb4GYL/sdLOu9jOoD/3Yok9e6zwb8r
V5dKuoJ/q7VsbsZc8D8v7pB/7z4w/u78L7Ne6Q6n7weUlY/uPRLi0Soy6T33
GMQzUlmHndMV4gk5k8GGNYD/X5fkbwofDbh7xHKVGxPB/0PZqTw9K/Av8Zr5
usQE5vM+d2fPJevh+Q8TKlaE/wy/J8bYPv598HxNtyU2evUrZqz+Tk6EY4x8
MhVP2IdMXfPf/14x/zlf8fGK8lUVI85XVQzKV6w4X0lYcb7SYsX5SosV5yst
VpyvtFhxvtJixflKyorzlZQV5ysdVpyvdFC+kqN8JUf5So7ylZzmq2/L16yP
8pUc5Ss5yldylK/kKF/JUb6So3wlR/lKjvKVHOUrOcpXcpSv5ChfyVG+kqN8
JUf5So7ylRzlKznKV3KUr+QoX8lRvpKjfCVH+UqO8pUc5Ss5yldylK/kKF/J
Ub6So3xVxQx0HGJxrek8xTP62tXoS25RLM5nOH9JWKNWuhNOFWbT/Xz1l4Ym
z9Q8ij8XJDhd935BceynDPM95S/p/hbnPykrzn86KP/psHvbu2X5DoD9Lc6H
cpQP+fNElA+rGCdv++DLP6XT+O0T7vfwTobvMcM2S2l+Lnx/qnYm7Yy3g38T
W9tfHE2OUnsof7Id/mic+S4+k9o7/OWOb6u2BRRvbZ0/xu13mK9NVNjmhH7w
/U4Lfh4V6bSMnn+NA3stfBtLz2vWaH2QxWQ52B/5kfEqvAXrW7DoyCrLRWB/
XhvGS7cN2Pccv6iTs0kA5GPDmqeW5RC/su38A8unP6L2KtTtAnpPg/Np746V
qq4pcB4Rpj587iywj/O1OP9WMT3Hvwjen55B7W+2C8wZUVtC30/a1KRyyAb8
uU3iLpefg/m83PJyzy8mGyC/7DyY+vgrrI/OmVEpRotgfRzzKj6XG0F82nvX
6yT4g33y2cZf9gfMB+d3cf6uYnYNf3sgMgj2f6vrhuPtKiF+p21pL3d0A/uL
rbw3KCIh/ranJeE1hr7U3uPy+M0zTRZTf7NY7ySFP/gznhNbXPcZ1qv2xLsj
lgTm4zbcILVkNPgbumHbu9gb4C/Xwt1uaojfP/KF82f3HWsKgPlsMczwSC+F
/T7WrVtjpCbs36hJ9b9lpK+i9kinsv3Nht7UXp317mFWPhB/5gcm0/kKxHPg
uM2kX+NgPqN3lVZn/9v61R9d3HW5KcynRntZSPfItdSes2fqjZkhPtTf54L8
03p7wF+7aoW0OB784e8Hx4+/N2xv07B86yP6wIfXSq1drqulUHsCnz3zDXKM
/1I/6RarFLqe+PnAZXtW7ojOaGFf6RtWbbE+eL9lVq6s0NYFfSvYc/mG27bY
f/j3exRvv1svEfSGYM/sG+7Y4vvG6zn8Y22O6gfQI4I9029Qu8X3gPeT8P6/
/OkhPVH0A/7239YbCBHzN0LE/I0QMX8jRMzfCBHzN34BRPyNEDF/I0TM3whB
9QaC6g0E1RsIqjcQVG8gqN5AUL2BoHoDQfUGguoNBNUbCKo3EFRvIKjeQFC9
gaB6A0H1BoLqDQTVGwiqNxBUbyCo3kBQvYGgegNB9QaC6g0E1RsIqjcQVG8g
qN5AUL2BoHoDQfUGguoNBNUbCKo3EFxvQPUAgusBK5x+K9bwhfFiS5tDKk8B
D8y2vrhPdznFh/MOX9k9C8bVboxe4H8b8O2Thsl+ZYBxvj8rjwpzmATjOl8n
uI68BPjRx14XhxYCPu0pK0yoAYzzb6ydaYfzzjCuMMhLiT4DOK/dBePIPMBX
/A9P6FoJOGJIoPeMesA4/93KWjiu0BHGTS7oqeSeAlxw9E+Pp88B39B+udu5
HHDUkyeRgX8BDrvoYGnVCPi/O8+wHq1i/n/rpwTpUcL+5/qpBOlRLaRHpUiP
6vxAjxohPWqE9KgR0qMKpEcVSI8qkB5VID2qQHpUgfSoAulRBdKjCqRHFUiP
KpAeVSA9qkB6VIH0qALpUQXSowqkRxVIjyqQHlUgPapAelSB9KgC6VEF0qMK
pEcVSI8qWtRPxXqUELEexfXVKkasL6sYsb7E9VXC/qi+muaTq7l8adl3LGdN
g3z8GjNh/znUnR+Qogf7jbguMdjtXUHx8NPXLMfcgv0nPp8VLeq142fqGBvu
jqHY5nXiWLX11yleqzxi3hIHmI9YjxI2b5qL+wM9iLd+itdW344Qz74utmFR
/S9Te7v9bhzps/825J98188xuwqpfbEelbDx/lOSFGll1J6a/dobRxMq6Hxw
/sj/oGL47Ek0xUfj1Fau/SmWYreS07qk4CLkT/eGlGiHOIqflQYG6g+CeMT6
lbBJaw95jzsK8ahkr1ggOwDxpGn4GQbdvwH5ImbF0tt58dTe6GqHd21zwL5Y
v0rY2L1dDOtrwb4kZVOrnuVgH+e78Au+YRYroyh+2uNUm9jga5BfkrzczpnD
fM0ehnkUn4b9LNa/hE1e2f/29O3weyp3/JzktBH8N69UXEs3hPmtXJ4TvlQR
T7FSTqyxzxWY370Kd+uFVbC+Yj0sYRM21Wv/dBXmqxrAdcg/Df7KBz0r8Ft7
h9ozyFizrVkZ8gHO18r7bF68SIb89unl6l9chsF65C74rVL93AWKR65bFLPB
HdZjdM22N97rYf6DM7PYkFUQj5755+Z5j+D7WJr+bkJwKezngkjTDa3DYb75
muvN6jrB/jn4KPWTfmUhxZbLdjKzgv5tvX1sdKx3gr9B00fGu2+D/XPPbkRc
jhmsX3SqmdFrbVgPzC+sVfatubwE1qOhf3HDMT1YD8nL1wGFE2E9XHKfO2Za
wXrE2a5z6rYIvuce26dEXY+C+W80ceJK4mD+ZU37urmthPkfv/NhdIAWzN+x
a21y9QeYv9qNwJP5e2D+O62WKTRWwnw3z5oQ+soX1mP2ko3nRrSD/TY1Olvf
2wDWY7KDIq7dF7B/SaPQ8nko7C9L1cLObS6C/U1PjGfa2YO99B3HcjcWFf7D
eBUjHpey//l9QvB88PzxeYC/p7D86EhL3deUjwhYeB9h6l+oB+D1wfux/a3l
2V5bS1tgwR8aJ46fxrr13lhK7Qn+db4VEFTZbP+jo8N3AN/CzycHaQyqc34D
5813LPhD40TtYVHibfs31J4Qj1Bv2D7N5qrlpDf098DPz596rN61D9yPC1jw
h8ZJTOCqzfq931F7QjxCfcKsZ/rSgH7AF/HzO4cbq+eOgvt3AQv+0DhJXV0f
cGToe2pPiEeoZ4zTctyo5SCMy1n8fJXd1euhIWXUn4AFf2icCP6F+keL7wOd
R+uUolOmLq2g9gUs2EfjRPD3r/gNWpyf+DwR3pd9w13p9/S/u0/D+uVH92lY
v+D7NAm6T5Og+zQJuk+ToPs0CbpPk6D7NAnSLxKkXyQ/0C8SpF8kSL9IWJ/Y
ih5W995TLNYvWki/aCH9IkX6RYr0ixTpFynSL1KkX6RIv0iRfpEi/SJF+kWK
9IsU6Rcp0i9SpF+kSL9IkX6RIv0iRfpFivSLFOkXKdIvUqRfpEi/SJF+kSL9
IkX6RYr0ixTpF+n/Ub+0vE8T94cQFt+vzTrR5zbTFfaTWJ9oIX2ihfSJFOkT
KdIj0h/qEdQ/gvSGFuvLuBevTvsIv7/ofowQsf6oYsT9JQTpCy226znVfZ0X
QPw/0hfzh1hH3LR+QO0XugQ1VXx6T+21n21h63wc4nOdMmNuueEh+j7WIz3I
2oDRFfB7JOX27jV/xFk6Lu5XIezjubKrYSMh/td6W/dEVIO/TLe7BuMOXKHx
nU03ilw/Cs6/H+kJcX9LFVPiaOWs/AfMb3KdzvTBAXCeLPxU+2tcWAh9H+uP
nWHHo5Pen6bYc5NcqvsGfg/UD8O+cKs+84cqzC/p8bA2XrEwv9rmyvwJOy9R
ewF2Y99rHIX5/UgfzM7YuKbtI5jPJkZzufVWmA93na1RTDlAn8f6oXzDtDc+
A2E+k8NnxcU8gPmg/hrWxMdhTS9riHfG46Ie3GvwXxTXP1wvFOa3w0VyM2cr
rN+gjrvJT3KY36IDFfaXb4H9pIB9P68rBvs/0gOfHYboRKaD/zvyObG/3ILz
BOsDg6pbW0e/hu9zebjfTP9p4P9ur6+pwerg38P4zfmTgbCeirbXJUPdYT6L
Cuc/L9WE+UwdNWTXu2vwfmS7PK9tTyG+4Rs13VN8wV/AjaOmdzzg+eOSGMb+
CKxfzeIc5/w+YN+WOGSU6sB5YLn+dc56AvUJ1H/Eisd/+DzCLZ/H/nvV+xZr
v7/0j+uJzxf8/LwLiTVNX+B+UPAv8H+8vvh7E7/f0p6AXb9hVRbvF8w3DKs0
exQfgP5SAQt8EY0TMTai9VeB3+PvAe8n4X2Bnwvrjfmj5Pt6CPwxfFVR83g1
jvZjnZqobLxAn6P8ccmiTXv8B3GUP6Y2drm13Zuj/DFz4bP8Bac4Wv9uKikL
HV/F0fq3wRLlmFD7L7T+fb5mlkHKtS+0/j2q37GOpcb1tP79ZHFgQcCZelr/
znnvpXSoXwOtf/fyDB7pmd5A+4fjpqVyj9Z8pf3DN21Ldhwxa2QE/hiUmNsh
+EsjI/DHg2Oyzg950sQI/HFBH+O+w2KaGYE/6hQlbBjtRNg3Y7IitRPfMwvz
Fj5zToP+YfMNBZKHE5Uof4wzkXRpeqNE+aNqm71e7ZcpU/4YYufhZ9hJhfLH
w70d5rIXVCh/zNfzcwt2VKX8seTRRB0f5VaUP/aNm3vz1cVWlD9+fJD1VW+F
GuWPiuQpX1UHq1P+eHYpieUa1Sl/VH1n92FcjoTyx4H3jRuLoltT/qjSzl52
wFeD8sdj4cbb+ni1ofyx3wZGZd+otpQ/fmqIfdBleDvKH59tqs060U+T8sc4
E701V03bU/6omZatMbiLFuWPFvohl6eFa1H+OCrUfmuDZQfKH01LTx8KvdeB
8scleepG1+w7Uv74KMYxWPauI+WP0si46bvWdKL80cLD8OefNYE/PgrISq+7
BPzx6SXl5RJHGeWPh779L6P80a63JQlW4mg/1pj1u+4qt+doP9aAylqPyaYc
5Y8Nm+vsfJ05yh/3eVZrm2zjaH8W9+525YM0jhH4XsBapZv+0TLK9wZP6EG8
+O9R4HsGm+Rn+mpwjFB/fjGi9bC1Co72TwWMa1UROpJjBD7IroueUrKKo/1U
c/VmVPe9yTHCfeOcuIhVPdbIKB9sHdCZ7FHhGIEPKn41H5wg5RihHp3gnLJK
Ys3RfqpbnVy3dJnGMcJ95dhq4/7dnsooH+z1e2dWl49f4INjurid6ibhGKHe
HKZd5vKHAb8vvvcnT3SuLVw1hJ/P9/7ksqyYUb8v4de3XdGM7iFpTKhhUdm1
ixwj3H+mTdfV1Joto3zR1L4Hu0qZP4++88WIzv0eJ3bgGKF+Pcn7/q6DFvzv
597tofq5+0yfhNzNfSdxjHB/qluUH5hxW0b7r4ZbWLKv+fgFfmkQYS5Z35Zj
1qn7K9xCjjEv/mxmnqtyjHDfanD51fkdZTLKF/OT2zqp8e8LfPHR5Sfz+qpz
jFB/dt+umaTfhWOEfunf153cwNnx8X3nk/vSZVatF3HMvFe9kj1GpDE28WZb
dp7lGOH+Vu+z4SgNdxnlk7U/9XZq5venwCez+nZ+OUWL31/f69kbm5avX9qb
o/3W6XdcYsa7coxw/2ugQ8xOXpKx+1b8blxpuINRHtQ7+wgfv8BHV6+estip
DZ8PHmdF33WNYK7Etc025ecv3BdvHBTs61ooo/1ftUuMsvvz7w9OSfPoEhnK
vJhnlN3A/z6HpV393EOCGJVeVk62fLzC/XJPF/W8+zUyykeLj6sFK/HvC3zU
wXKb+10+Hwn16oBIzZwhco4R+rsnyC1Xxw/mGKG/u2DaW6NRCzhmYYrjmgZ5
GnNvqc1B39McI9xXa2TKXm13kVH+qvGnuTSFj0fgr92qNyw7x3/fQv3b+8zP
2bPNOEboN+szmn1bMoFjhPvu+cP9P8vOytgYiYX5nbDfGC0102cb+fgF/jsr
pOzSXf77DV3w4fHbueFMlmdH13z+exPux7kOMyfH5clo/9nGYfLlPfj3U4Jk
r7fOPMws0zWuuc6vn0nhglb3XAOZ4A+WVzX4eIX79H6NfyV1r5SxQr9a9eKO
Npr8+2tKlOVGkbsYaY15zR0eC/1mO4yMXR14LNy/V19p935GvYzWx61mqnj9
zQcEPvx1QLPtNn79hfr4ndY7ZTk8HxD62a8GeBh25ddf6Gc3sF+xeu58/vca
VPw0VZLG/LStg8vSGH5/fr/P7+hRsSPFSUb59IyjFlHn+PkIfHrQ0ezjk/j1
F+rtKybrWb3iz1ehP97bUnHBnF9/oR8gYsOJWIcYGWvzZPWl7lP8mddxPVst
5eMX+PgDn0fXV/PrPyO7fbBe8lHmlEQ24gq//kL/QJLRiV6Vz2Vst8FHTyaG
rWQCG3VrDfn3A+oGRt1IOMTsut/d9iC//nn+ir1lc/cyPcMsD9Tx40K/gVOd
/eFJ5TJW6LdTnGn/sjU/rnbWIWLbzJ1Mcg/zxnM89uQi7ye6bmLWuinODeWx
0J/Q9/iChKC/ZOzNOxsWrjLxYPQetN6jwo8L/XV13gbxljwW+uvGdpJN7MRj
oZ9hwfYKR6tGGeLvWH9jPUGImJ9ivYP1CSFivtmy/wXxc6xfUb2fEHF9nxBU
/8f3Q+g+A9fbW/ZnievdLfu1xPXplv1b4npyy34ucT2YEHG9GN8PESKu97Zc
P3H/I+53bNFvTFD/Yot+OnF/IiHi/kVCxP2HhIj7EwkR9xcSIu4/JETcP0iI
uL+w5fzEf0+C/36EEPT3Jy3e/x9dGuvg
   "], {{{},
     {RGBColor[0.87, 0.94, 1], Opacity[0.1], EdgeForm[None],
      GraphicsGroupBox[{
        PolygonBox[{{97, 908, 909, 90, 98, 80, 88, 69, 76, 14, 254, 55, 13,
         488, 12, 250, 11, 10, 9, 8, 7, 246, 54, 6, 691, 64, 241, 53, 81, 71,
         100, 89}}],
        PolygonBox[{{101, 910, 911, 50, 58, 49, 48, 47, 46, 45, 44, 43, 42,
         41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25,
         24, 537, 23, 700, 22, 21, 531, 20, 524, 19, 517, 18, 510, 17, 503,
         16, 498, 258, 57, 15, 65, 56, 72, 62}}]}]}, {},
     {RGBColor[0.87, 0.94, 1], Opacity[0.1], EdgeForm[None],
      GraphicsGroupBox[{PolygonBox[{{113, 898, 899, 210, 223, 162, 174}}],
        PolygonBox[{{185, 896, 897, 242, 680, 112, 191, 179, 203}}],
        PolygonBox[{{194, 904, 905, 224, 169, 177, 122, 168, 121, 207}}],
        PolygonBox[{{230, 900, 901, 225, 181, 187, 165, 175, 118, 164, 117,
         116, 115, 163, 114, 192, 180, 204, 186, 217, 198}, {212, 902, 903,
         236, 220, 229, 201, 213, 182, 188, 167, 176, 120, 490, 166, 119, 206,
          193, 219, 200, 232}}],
        PolygonBox[{{226, 894, 895, 235, 216, 228, 197, 209, 161, 173, 111,
         489, 160, 110, 681, 159, 109, 178, 158, 190, 172, 221, 202, 233,
         214}}], PolygonBox[{{211, 906, 907, 157, 171, 156, 155, 154, 153,
         152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139,
          138, 137, 136, 135, 134, 133, 132, 131, 538, 130, 701, 129, 128,
         532, 127, 525, 126, 518, 125, 511, 124, 504, 170, 123, 195, 183, 205,
          497, 189, 218, 199, 231}}]}]}, {}, {}, {},
     {RGBColor[0.87, 0.94, 1], Opacity[0.1], EdgeForm[None],
      GraphicsGroupBox[{
        PolygonBox[{{357, 882, 883, 513}, {359, 886, 887, 527}, {358, 884,
         885, 520}}],
        PolygonBox[{{360, 888, 889, 463, 479, 440, 456, 400, 411}, {483, 880,
         881, 506, 356, 431, 416, 466, 446}}],
        PolygonBox[{{485, 890, 891, 473, 403, 412, 363, 402, 703, 362, 401,
         361, 432, 417, 447, 426}}],
        PolygonBox[{{478, 878, 879, 461, 477, 425, 439, 399, 410, 355, 398,
         354, 397, 353, 467, 450, 484, 462}}],
        PolygonBox[{{480, 876, 877, 430, 444, 415, 424, 396, 409, 352, 395,
         351, 350, 349, 348, 347, 346, 696, 684, 345, 394, 344, 449, 429, 486,
          465}}],
        PolygonBox[{{457, 892, 893, 390, 405, 389, 388, 387, 386, 385, 384,
         383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370,
          369, 368, 367, 366, 365, 404, 364, 433, 418, 448, 427, 464, 441,
         481}}]}]}, {},
     {RGBColor[0.87, 0.94, 1], Opacity[0.1], EdgeForm[None],
      GraphicsGroupBox[{
        PolygonBox[{{678, 866, 867, 619, 633, 549, 598, 548, 597, 547, 629,
         613}}], PolygonBox[{{667, 874, 875, 639, 652, 614, 624, 599, 626,
         609, 659, 640, 674, 653}}],
        PolygonBox[{{663, 870, 871, 669, 635, 648, 566, 603, 565, 615, 602,
         627, 610, 641, 620, 655, 634, 673, 647}}],
        PolygonBox[{{671, 868, 869, 564, 601, 563, 562, 561, 560, 559, 558,
         557, 556, 555, 554, 553, 552, 551, 600, 550, 644, 630, 677, 658}}],
        PolygonBox[{{656, 872, 873, 594, 606, 593, 592, 591, 590, 589, 588,
         587, 586, 585, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 574,
          573, 572, 571, 570, 569, 568, 605, 567, 616, 604, 628, 611, 642,
         621, 676}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{}, {},
     {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.],
      Dashing[{Small, Small}],
      LineBox[{1, 91, 82, 73, 66, 59, 51, 2, 679, 3, 487, 4, 92, 83, 74, 67,
       60, 52, 94, 85, 77, 70, 63, 5, 93, 84, 75, 68, 96, 87, 79, 61, 95, 86,
       99, 78}],
      LineBox[{97, 89, 100, 71, 81, 53, 241, 64, 691, 6, 54, 246, 7, 8, 9, 10,
        11, 250, 12, 488, 13, 55, 254, 14, 76, 69, 88, 80, 98, 90}],
      LineBox[{101, 62, 72, 56, 65, 15, 57, 258, 498, 16, 503, 17, 510, 18,
       517, 19, 524, 20, 531, 21, 22, 700, 23, 537, 24, 25, 26, 27, 28, 29,
       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, 49, 58, 50}]},
     {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.],
      Dashing[{Small, Small}],
      LineBox[{108, 222, 208, 196, 227, 215, 234, 184}],
      LineBox[{226, 214, 233, 202, 221, 172, 190, 158, 178, 109, 159, 681,
       110, 160, 489, 111, 173, 161, 209, 197, 228, 216, 235}],
      LineBox[{185, 203, 179, 191, 112, 680, 242}],
      LineBox[{113, 174, 162, 223, 210}],
      LineBox[{230, 198, 217, 186, 204, 180, 192, 114, 163, 115, 116, 117,
       164, 118, 175, 165, 187, 181, 225}],
      LineBox[{212, 232, 200, 219, 193, 206, 119, 166, 490, 120, 176, 167,
       188, 182, 213, 201, 229, 220, 236}],
      LineBox[{194, 207, 121, 168, 122, 177, 169, 224}],
      LineBox[{211, 231, 199, 218, 189, 497, 205, 183, 195, 123, 170, 504,
       124, 511, 125, 518, 126, 525, 127, 532, 128, 129, 701, 130, 538, 131,
       132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
       146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 171, 157}]},
     {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.],
      Dashing[{Small, Small}], LineBox[CompressedData["
1:eJwVzTdSglEUgNGnDSioYMCAAUwICAbMOYuY0YrSBei+dAF2bAg7KzvPX5z5
7tx5If/20XzvCiG0iBseqHPOMQfs0cNndwi92iFBki+7b/rM/QyQIs0gQ/ww
zAgZfhnlj7Hoc/fHNaYT0Tuajc7rpE7RNk9rVmc0R55Z5phngUUKLFGkRJll
KlRZYZU11qmxwSZbbLPDIzdccMIh+zzR4JJTjnjmlivOaHLHNS/c88ou/9yx
Fxk=
       "]]},
     {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.],
      Dashing[{Small, Small}],
      LineBox[{341, 468, 451, 434, 419, 406, 391, 342, 469, 452, 435, 420,
       407, 392, 471, 454, 437, 422, 685, 413, 343, 470, 453, 436, 421, 408,
       474, 458, 442, 428, 393, 472, 455, 438, 423, 476, 460, 445, 414, 475,
       459, 482, 443}],
      LineBox[{480, 465, 486, 429, 449, 344, 394, 345, 684, 696, 346, 347,
       348, 349, 350, 351, 395, 352, 409, 396, 424, 415, 444, 430}],
      LineBox[{478, 462, 484, 450, 467, 353, 397, 354, 398, 355, 410, 399,
       439, 425, 477, 461}], LineBox[{483, 446, 466, 416, 431, 356, 506}],
      LineBox[{357, 513}], LineBox[{358, 520}], LineBox[{359, 527}],
      LineBox[{360, 411, 400, 456, 440, 479, 463}],
      LineBox[{485, 426, 447, 417, 432, 361, 401, 362, 703, 402, 363, 412,
       403, 473}],
      LineBox[{457, 481, 441, 464, 427, 448, 418, 433, 364, 404, 365, 366,
       367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380,
       381, 382, 383, 384, 385, 386, 387, 388, 389, 405, 390}]},
     {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.],
      Dashing[{Small, Small}],
      LineBox[{545, 661, 645, 631, 617, 607, 595, 664, 649, 636, 622, 612,
       546, 662, 646, 632, 618, 608, 666, 651, 638, 625, 596, 665, 650, 637,
       670, 657, 623, 668, 654, 675, 643, 672, 660, 687}],
      LineBox[{678, 613, 629, 547, 597, 548, 598, 549, 633, 619}],
      LineBox[{671, 658, 677, 630, 644, 550, 600, 551, 552, 553, 554, 555,
       556, 557, 558, 559, 560, 561, 562, 563, 601, 564}],
      LineBox[{663, 647, 673, 634, 655, 620, 641, 610, 627, 602, 615, 565,
       603, 566, 648, 635, 669}],
      LineBox[{656, 676, 621, 642, 611, 628, 604, 616, 567, 605, 568, 569,
       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 606, 594}],
      LineBox[{667, 653, 674, 640, 659, 609, 626, 599, 624, 614, 652,
       639}]},
     {RGBColor[1, 0, 0], AbsoluteThickness[1.6], Opacity[1.],
      LineBox[CompressedData["
1:eJwNzvkyV3Ecx+FjK6ISlaVFFKUikYoI7fb6UdoQF1BX1OVYQilJtlBIi0gp
hOr545nXmfd8PzMnvf1J6HFYEARP6QgPgmsRQZBLC6nc5xKP2MYdLtLKcR5y
hb9uQ1pMFg+4zF7uUs5JVryr1ULS2UUTZZwgikZKOEYynW6u6yn2Ecs/W4Ne
4ChJrNrq9CwZJLCFLvsNzWM/cQSs2ev1HIdJZCvd9ko9zQG2E8Yf+009zxF2
E80ze5Xmc5AdhLNu76HadwFp7CSCDXsvfTznBf285BUDvGaQNwzxlmFGGGWM
cd4xwSRTvOcD08wwy0fm+MRnvvCVeb6xwCLfWeIHP1nmFzX++QyHiCeSTfst
LSKTPcRwm1KySeEeFeTQzFXa+O3+P2AoSpQ=
       "]]},
     {RGBColor[0.87, 0.94, 1], Opacity[0.1], LineBox[{104, 107, 103}],
      LineBox[{105, 106, 102}], LineBox[{239, 263, 238}],
      LineBox[{240, 243, 237}], LineBox[{245, 247, 244}],
      LineBox[{249, 251, 248}], LineBox[{253, 255, 252}],
      LineBox[{257, 259, 256}], LineBox[{261, 262, 260}],
      LineBox[{495, 500, 494}], LineBox[{496, 544, 493}],
      LineBox[{502, 507, 501}], LineBox[{509, 514, 508}],
      LineBox[{516, 521, 515}], LineBox[{523, 528, 522}],
      LineBox[{530, 534, 529}], LineBox[{536, 540, 535}],
      LineBox[{542, 543, 541}], LineBox[{689, 692, 688}],
      LineBox[{690, 708, 686}], LineBox[{694, 697, 693}],
      LineBox[{699, 704, 698}],
      LineBox[{706, 707, 705}]}}, {{}, {}, {}, {}, {}, {}, {}, {}}}],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"\"", TraditionalForm],
     FormBox["\"\"", TraditionalForm]}, {
     FormBox["\"t\"", TraditionalForm],
     FormBox["\"\"", TraditionalForm]}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  LabelStyle->Directive[
    GrayLevel[0], 16],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" ->
    AbsolutePointSize[6], "ScalingFunctions" -> None, "AxesInFront" -> True},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02],
     Scaled[0.02]}, {
     Scaled[0.05],
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.672048645143882*^9, {3.672048698219119*^9, 3.672048713488167*^9}, {
   3.672048851590473*^9, 3.672048885538032*^9}, 3.672053519379945*^9, {
   3.672063224498054*^9, 3.672063231039743*^9}, {3.672119248500429*^9,
   3.672119262658084*^9}, {3.672492204446155*^9, 3.672492215355034*^9},
   3.6724922551452*^9, 3.6724922993280582`*^9, 3.672494338237258*^9, {
   3.672494423237378*^9, 3.672494431165763*^9}, 3.673192090495599*^9,
   3.6738757365318604`*^9, {3.676608492858349*^9, 3.6766085140394773`*^9},
   3.676608553550797*^9, 3.6766106867351017`*^9, {3.676712301369864*^9,
   3.676712362914713*^9}, {3.6767124099796047`*^9, 3.676712420647151*^9},
   3.6767125410982122`*^9, 3.676712630056759*^9, 3.676712713379998*^9,
   3.676712757137391*^9, 3.677305620898238*^9}]
}, Open  ]],

Cell["The trajectories falls into three categories ", "Text",
 CellChangeTimes->{{3.6720489107119427`*^9, 3.6720489317667923`*^9},
   3.672049082491441*^9}],

Cell[CellGroupData[{

Cell["The ones ending below \[Beta],", "Item",
 CellChangeTimes->{{3.672048978970089*^9, 3.672048993624916*^9}, {
  3.672049052314961*^9, 3.6720490693873*^9}, {3.6766095262931757`*^9,
  3.67660953010378*^9}}],

Cell["The ones ending above h(t)+\[Beta],", "Item",
 CellChangeTimes->{{3.672048978970089*^9, 3.672049009745328*^9},
   3.672049071467177*^9, {3.676609535867612*^9, 3.676609538898301*^9}}],

Cell["The ones ending in between \[Beta] and h(t)+\[Beta].", "Item",
 CellChangeTimes->{{3.672048978970089*^9, 3.672049021305677*^9}, {
  3.672049058930904*^9, 3.6720490729553432`*^9}, {3.676609542166155*^9,
  3.676609551793042*^9}}]
}, Open  ]],

Cell[TextData[{
 "In the first case, both ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A",
      RowBox[{"N", "(", "t", ")"}]], "[",
     RowBox[{
      RowBox[{"1", "\[VerticalLine]", " ",
       RowBox[{
        SubscriptBox["F", "t"], "(",
        SubscriptBox["\[Beta]", "1"], ")"}]}], ",", "...", ",",
      RowBox[{
       SubscriptBox["F", "t"], "(",
       SubscriptBox["\[Beta]",
        RowBox[{"N", "(", "t", ")"}]], ")"}]}], "]"}],
    SubscriptBox["\[DoubleStruckCapitalI]",
     RowBox[{"{",
      RowBox[{
       RowBox[{"N", "(", "t", ")"}], "\[LessEqual]", " ",
       RowBox[{
        RowBox[{"h", "(", "t", ")"}], "+", "\[Beta]"}]}], "}"}]]}],
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[DoubleStruckCapitalI]",
    RowBox[{"{",
     RowBox[{
      SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], "}"}]],
   TraditionalForm]]],
 " evaluates to 1, as no crossing is possible. In the second case, both ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A",
      RowBox[{"N", "(", "t", ")"}]], "[",
     RowBox[{
      RowBox[{"1", "\[VerticalLine]", " ",
       RowBox[{
        SubscriptBox["F", "t"], "(",
        SubscriptBox["\[Beta]", "1"], ")"}]}], ",", "...", ",",
      RowBox[{
       SubscriptBox["F", "t"], "(",
       SubscriptBox["\[Beta]",
        RowBox[{"N", "(", "t", ")"}]], ")"}]}], "]"}],
    SubscriptBox["\[DoubleStruckCapitalI]",
     RowBox[{"{",
      RowBox[{
       RowBox[{"N", "(", "t", ")"}], "\[LessEqual]", " ",
       RowBox[{
        RowBox[{"h", "(", "t", ")"}], "+", "\[Beta]"}]}], "}"}]]}],
   TraditionalForm]]],
 " and  ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[DoubleStruckCapitalI]",
    RowBox[{"{",
     RowBox[{
      SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], "}"}]],
   TraditionalForm]]],
 " evaluates to 0 as crossing is almost sure. In the third case ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[DoubleStruckCapitalI]",
    RowBox[{"{",
     RowBox[{
      SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], "}"}]],
   TraditionalForm]]],
 " evaluates either to 1 or 0 while ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A",
      RowBox[{"N", "(", "t", ")"}]], "[",
     RowBox[{
      RowBox[{"1", "\[VerticalLine]", " ",
       RowBox[{
        SubscriptBox["F", "t"], "(",
        SubscriptBox["\[Beta]", "1"], ")"}]}], ",", "...", ",",
      RowBox[{
       SubscriptBox["F", "t"], "(",
       SubscriptBox["\[Beta]",
        RowBox[{"N", "(", "t", ")"}]], ")"}]}], "]"}],
    SubscriptBox["\[DoubleStruckCapitalI]",
     RowBox[{"{",
      RowBox[{
       RowBox[{"N", "(", "t", ")"}], "\[LessEqual]", " ",
       RowBox[{
        RowBox[{"h", "(", "t", ")"}], "+", "\[Beta]"}]}], "}"}]]}],
   TraditionalForm]]],
 " evaluates to some p\[LessSlantEqual]1. The following Table stacks the \
value of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A",
      RowBox[{"N", "(", "t", ")"}]], "[",
     RowBox[{
      RowBox[{"1", "\[VerticalLine]", " ",
       RowBox[{
        SubscriptBox["F", "t"], "(",
        SubscriptBox["\[Beta]", "1"], ")"}]}], ",", "...", ",",
      RowBox[{
       SubscriptBox["F", "t"], "(",
       SubscriptBox["\[Beta]",
        RowBox[{"N", "(", "t", ")"}]], ")"}]}], "]"}],
    SubscriptBox["\[DoubleStruckCapitalI]",
     RowBox[{"{",
      RowBox[{
       RowBox[{"N", "(", "t", ")"}], "\[LessEqual]", " ",
       RowBox[{
        RowBox[{"h", "(", "t", ")"}], "+", "\[Beta]"}]}], "}"}]]}],
   TraditionalForm]]],
 " and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[DoubleStruckCapitalI]",
    RowBox[{"{",
     RowBox[{
      SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], "}"}]],
   TraditionalForm]]],
 " for the different trajectories,"
}], "Text",
 CellChangeTimes->{{3.672049595533627*^9, 3.672049595931773*^9}, {
   3.6720498586302032`*^9, 3.672049859684176*^9}, {3.672049915093947*^9,
   3.6720499202780447`*^9}, {3.672050493956498*^9, 3.67205063683116*^9}, {
   3.6720509626394*^9, 3.67205101324127*^9}, 3.6720510938919897`*^9, {
   3.676609565705434*^9, 3.6766096259472523`*^9}}],

Cell[BoxData[{
 RowBox[{"TeXForm", "[",
  RowBox[{"N", "[",
   RowBox[{"CMCvsAppellMCMPTTUpperBoundary", "[",
    RowBox[{
    "Trajectories", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",",
     "\[Beta]"}], "]"}], "]"}], "]"}], "\[IndentingNewLine]",
 RowBox[{"MatrixForm", "[",
  RowBox[{"N", "[",
   RowBox[{"CMCvsAppellMCMPTTUpperBoundary", "[",
    RowBox[{
    "Trajectories", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",",
     "\[Beta]"}], "]"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.672051130263938*^9, 3.672051155166032*^9}, {
  3.672051188257341*^9, 3.672051195264204*^9}, {3.672053590135048*^9,
  3.672053594995153*^9}, {3.672119272540372*^9, 3.672119273391543*^9}, {
  3.6721275479857407`*^9, 3.6721275508523827`*^9}, {3.672492348836977*^9,
  3.672492350699691*^9}, {3.676609198506144*^9, 3.6766092225974503`*^9}}],

Cell[TextData[{
 "The variance is in fact reduced when a lot of trajectories are finishing \
their run between \[Beta] and h(t)+\[Beta], as otherwise ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["A",
      RowBox[{"N", "(", "t", ")"}]], "[",
     RowBox[{
      RowBox[{"1", "\[VerticalLine]", " ",
       RowBox[{
        SubscriptBox["F", "t"], "(",
        SubscriptBox["\[Beta]", "1"], ")"}]}], ",", "...", ",",
      RowBox[{
       SubscriptBox["F", "t"], "(",
       SubscriptBox["\[Beta]",
        RowBox[{"N", "(", "t", ")"}]], ")"}]}], "]"}],
    SubscriptBox["\[DoubleStruckCapitalI]",
     RowBox[{"{",
      RowBox[{
       RowBox[{"N", "(", "t", ")"}], "\[LessEqual]", " ",
       RowBox[{
        RowBox[{"h", "(", "t", ")"}], "+", "\[Beta]"}]}], "}"}]]}],
   TraditionalForm]]],
 "=",
 Cell[BoxData[
  FormBox[
   RowBox[{" ",
    SubscriptBox["\[DoubleStruckCapitalI]",
     RowBox[{"{",
      RowBox[{
       SubscriptBox["\[Tau]", "\[Beta]"], ">", "t"}], "}"}]]}],
   TraditionalForm]]],
 ". In our example the probability of interest is evaluated exactly by \
formula (1)"
}], "Text",
 CellChangeTimes->{{3.672061119351541*^9, 3.672061139142748*^9}, {
  3.672061353461316*^9, 3.672061370549721*^9}, {3.672061407368556*^9,
  3.6720614776973248`*^9}, {3.672061580453424*^9, 3.672061828868729*^9}, {
  3.672062101581541*^9, 3.672062193728365*^9}, {3.6721203173451366`*^9,
  3.6721203346871347`*^9}, {3.672120694668606*^9, 3.6721207595996943`*^9}, {
  3.676609638777533*^9, 3.676609666035194*^9}, {3.6767170605470657`*^9,
  3.676717062151651*^9}, {3.676717282239615*^9, 3.676717283913013*^9}, {
  3.6798336316630898`*^9, 3.679833724656481*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[",
  RowBox[{"SurvivalCrossingTimeMPTTUpperBoundary", "[",
   RowBox[{
   "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",", "\[Beta]"}],
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.679833760364571*^9, 3.679833767017357*^9}, {
  3.67983406421202*^9, 3.679834065979954*^9}}],

Cell[BoxData["0.5682645428359435`"], "Output",
 CellChangeTimes->{{3.67983405994512*^9, 3.6798340664237432`*^9},
   3.679835692159354*^9, 3.679835812073914*^9, 3.679836085663303*^9}]
}, Open  ]],

Cell["The variance associated to the APMC estimator is ", "Text",
 CellChangeTimes->{{3.67983409054459*^9, 3.679834121137289*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[",
  RowBox[{"VarianceAPMCCrossingTimeMPTTUpperBoundary", "[",
   RowBox[{
   "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",", "\[Beta]"}],
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.679834125206471*^9, 3.679834135851399*^9}}],

Cell[BoxData["0.18433781202806526`"], "Output",
 CellChangeTimes->{{3.6798341313324413`*^9, 3.67983413666229*^9},
   3.6798356955456533`*^9, 3.679835814873067*^9, 3.679836088092502*^9}]
}, Open  ]],

Cell["while the one of the CMC estimatotr is ", "Text",
 CellChangeTimes->{{3.679834155411079*^9, 3.6798341638393393`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[",
  RowBox[{"VarianceCMCCrossingTimeMPTTUpperBoundary", "[",
   RowBox[{
   "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",", "\[Beta]"}],
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.679834181824132*^9, 3.679834191081703*^9}}],

Cell[BoxData["0.24533995219139967`"], "Output",
 CellChangeTimes->{3.679834192260824*^9, 3.679835697992219*^9,
  3.679835816807921*^9, 3.6798360961586113`*^9}]
}, Open  ]],

Cell["\<\
The use of formula (1) permits indeed to remove the variability induced by \
the jump times and implies better result when they actually influence the \
crossing time, namely when the likelihood of N(t) being between \[Beta] and \
h(t)+\[Beta] is high. We can appreciate that fact by considering the \
evolution of the variance of the two Monte Carlo estimators with the time \
horizon t. The probabity of N(t) being between U and h(t)+U is indeed \
increasing \
\>", "Text",
 CellChangeTimes->{3.679833720441601*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Plot", "[",
  RowBox[{
   RowBox[{"Sum", "[",
    RowBox[{
     RowBox[{"PDFMPTT", "[",
      RowBox[{"W", ",", "\[Nu]", ",", "n", ",", "t"}], "]"}], ",",
     RowBox[{"{",
      RowBox[{"n", ",",
       RowBox[{
        RowBox[{"Floor", "[", "\[Beta]", "]"}], "+", "1"}], ",",
       RowBox[{"Floor", "[",
        RowBox[{
         RowBox[{"h", "[", "t", "]"}], "+", "\[Beta]"}], "]"}], ",", "1"}],
      "}"}]}], "]"}], ",",
   RowBox[{"{",
    RowBox[{"t", ",", "1", ",", "4"}], "}"}], ",",
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",",
   RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",",
   RowBox[{"ImageSize", "\[Rule]", "Large"}], ",",
   RowBox[{"LabelStyle", "\[Rule]",
    RowBox[{"Directive", "[",
     RowBox[{"Black", ",", "16"}], "]"}]}], ",",
   RowBox[{"AxesLabel", "\[Rule]",
    RowBox[{"{",
     RowBox[{"\"\<t\>\"", ",", "\"\<\>\""}], "}"}]}], ",",
   RowBox[{"Frame", "->", "True"}], ",",
   RowBox[{"FrameLabel", "\[Rule]",
    RowBox[{"{",
     RowBox[{
      RowBox[{"{",
       RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",",
      RowBox[{"{",
       RowBox[{"\"\<t\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}]}]}],
  "]"}], "\[IndentingNewLine]",
 RowBox[{
  RowBox[{"Export", "[",
   RowBox[{"\"\<PDFNt.png\>\"", ",", "%"}], "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.672120706785145*^9, 3.6721207067959423`*^9}, {
   3.672120779615992*^9, 3.672120798721792*^9}, 3.672120854603394*^9, {
   3.67212089233018*^9, 3.6721209389557*^9}, {3.672120992650105*^9,
   3.672121004027884*^9}, {3.672121034030517*^9, 3.672121071374535*^9}, {
   3.6721211105460157`*^9, 3.672121143474966*^9}, {3.672121216917391*^9,
   3.67212132031271*^9}, {3.6721215726911087`*^9, 3.672121573454982*^9}, {
   3.672492477468371*^9, 3.672492478223778*^9}, {3.676609233710619*^9,
   3.676609243193698*^9}, {3.676609671620863*^9, 3.676609694675296*^9},
   3.67983437055149*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {},
   {RGBColor[0, 0, 1], AbsoluteThickness[1.6], Opacity[1.],
    LineBox[CompressedData["
1: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
PK9EeoSda1Y18+8fzitAdL8f9v8AAVUDWw==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm],
    FormBox["\"\"", TraditionalForm]},
  AxesOrigin->{1., 0.12},
  DisplayFunction->Identity,
  Frame->{{True, True}, {True, True}},
  FrameLabel->{{
     FormBox["\"\"", TraditionalForm],
     FormBox["\"\"", TraditionalForm]}, {
     FormBox["\"t\"", TraditionalForm],
     FormBox["\"\"", TraditionalForm]}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->Large,
  LabelStyle->Directive[
    GrayLevel[0], 16],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" ->
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02],
     Scaled[0.02]}, {
     Scaled[0.05],
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.67212108329172*^9, 3.672121113367126*^9, 3.6721211651233807`*^9, {
   3.672121227771315*^9, 3.672121321676592*^9}, 3.6721215441945343`*^9,
   3.672121574688518*^9, {3.672492466915267*^9, 3.67249247946905*^9},
   3.672494346504931*^9, 3.672494453130487*^9, 3.673192108404035*^9, {
   3.6766096858851767`*^9, 3.676609696217252*^9}, {3.676610339952578*^9,
   3.6766103458136806`*^9}, 3.6766104548639107`*^9, 3.676610698075716*^9,
   3.676712433812483*^9, 3.6767125494983387`*^9, 3.6767126435387907`*^9,
   3.6767127226869183`*^9, 3.676712766117058*^9, 3.6798343720573053`*^9,
   3.679835745200636*^9, 3.679835821635385*^9, 3.679836105436243*^9}]
}, Open  ]],

Cell[TextData[{
 "On the left hand side, the variance of the CMC estimator and the APMC \
estimator are plotted for different time horizon. On the right-hand side the \
relative difference ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{
     SubsuperscriptBox["\[Sigma]", "APMC", "2"], "-",
     SubsuperscriptBox["\[Sigma]", "CMC", "2"]}],
    SubsuperscriptBox["\[Sigma]", "CMC", "2"]], TraditionalForm]]],
 "."
}], "Text",
 CellChangeTimes->{3.672120720950021*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]",
  RowBox[{
   RowBox[{"PlotVarianceCMCAPMCrossingTimeMPTTUpperBoundary", "[",
    RowBox[{
    "W", ",", "\[Nu]", ",", "4", ",", "h", ",", "Inverseh", ",", "\[Beta]",
     ",", "16", ",", "Full"}], "]"}], "\[IndentingNewLine]",
   RowBox[{
    RowBox[{"Export", "[",
     RowBox[{"\"\<VarianceCMCVsAPMC.png\>\"", ",", "%"}], "]"}],
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.67206221822775*^9, 3.672062223449112*^9}, {
   3.672062267018022*^9, 3.672062317667584*^9}, 3.6720624794064713`*^9, {
   3.672063027411295*^9, 3.672063047770854*^9}, {3.672063312460595*^9,
   3.672063672883602*^9}, {3.67212056417931*^9, 3.672120687906665*^9},
   3.6721211260863523`*^9, 3.672492511265036*^9, 3.673192185319791*^9, {
   3.676609707053356*^9, 3.6766097170207443`*^9}, {3.6767126555205584`*^9,
   3.676712655914546*^9}, {3.6767127310108*^9, 3.676712731993622*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     TemplateBox[{GraphicsBox[{{{}, {}, {
           Directive[
            Opacity[1.],
            AbsoluteThickness[1.6],
            RGBColor[1, 0, 0],
            Dashing[{Small, Small}]],
           LineBox[CompressedData["
1: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
            "]]}, {
           Directive[
            Opacity[1.],
            AbsoluteThickness[1.6],
            RGBColor[0, 0, 1]],
           LineBox[CompressedData["
1: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
9A==
            "]]}}}, {
        DisplayFunction -> Identity, AspectRatio ->
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True},
         AxesLabel -> {
           FormBox["\"t\"", TraditionalForm],
           FormBox["\"\"", TraditionalForm]}, AxesOrigin -> {0, 0},
         DisplayFunction :> Identity,
         Frame -> {{False, False}, {False, False}},
         FrameLabel -> {{None, None}, {None, None}},
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}},
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> Full, LabelStyle -> {
           GrayLevel[0], 16},
         Method -> {
          "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" ->
           AbsolutePointSize[6], "ScalingFunctions" -> None},
         PlotRange -> {All, All}, PlotRangeClipping -> True,
         PlotRangePadding -> {{
            Scaled[0.02],
            Scaled[0.02]}, {
            Scaled[0.05],
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
        FormBox[
         TemplateBox[{
          "\"\\!\\(\\*SubsuperscriptBox[\\(\[Sigma]\\), \\(CMC\\), \
\\(2\\)]\\)\"",
           "\"\\!\\(\\*SubsuperscriptBox[\\(\[Sigma]\\), \\(APMC\\), \\(2\\)]\
\\)\""}, "LineLegend", DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3],
                    GrayLevel[0]]],
                    PointSize[0.5],
                    Opacity[1.],
                    AbsoluteThickness[1.6],
                    RGBColor[1, 0, 0],
                    Dashing[{Small, Small}]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3],
                    GrayLevel[0]]],
                    PointSize[0.5],
                    Opacity[1.],
                    AbsoluteThickness[1.6],
                    RGBColor[1, 0, 0],
                    Dashing[{Small, Small}]], {}}}, AspectRatio -> Full,
                    ImageSize -> {40, 10}, PlotRangePadding -> None,
                    ImagePadding -> Automatic,
                    BaselinePosition -> (Scaled[-0.086] -> Baseline)], #,
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3],
                    GrayLevel[0]]],
                    PointSize[0.5],
                    Opacity[1.],
                    AbsoluteThickness[1.6],
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {40, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3],
                    GrayLevel[0]]],
                    PointSize[0.5],
                    Opacity[1.],
                    AbsoluteThickness[1.6],
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full,
                    ImageSize -> {40, 10}, PlotRangePadding -> None,
                    ImagePadding -> Automatic,
                    BaselinePosition -> (Scaled[-0.086] -> Baseline)], #2}},
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}},
                    AutoDelete -> False,
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}},
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}},
                    GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}],
                    "Grid"]}},
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete ->
                 False, GridBoxDividers -> {
                  "Columns" -> {{None}}, "Rows" -> {{None}}},
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{1}}}],
                "Grid"], Alignment -> Left, AppearanceElements -> None,
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction ->
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              GrayLevel[0], FontSize -> 16, FontFamily -> "Arial"},
             Background -> Automatic, StripOnInput -> False],
            TraditionalForm]& ),
          InterpretationFunction :> (RowBox[{"LineLegend", "[",
             RowBox[{
               RowBox[{"{",
                 RowBox[{
                   RowBox[{"Directive", "[",
                    RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",",
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",",
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0],
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0],
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0],
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame ->
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.],
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize ->
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]],
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {},
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]},
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]],
                    SelectionMove[Typeset`box$, All, Expression];
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1;
                    FrontEnd`Private`$ColorSelectorInitialColor =
                    RGBColor[1, 0, 0];
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True;
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$,
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top},
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged",
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator ->
                    Automatic, Method -> "Preemptive"],
                    RGBColor[1, 0, 0], Editable -> False, Selectable ->
                    False], ",",
                    RowBox[{"Dashing", "[",
                    RowBox[{"{",
                    RowBox[{"Small", ",", "Small"}], "}"}], "]"}]}], "]"}],
                   ",",
                   RowBox[{"Directive", "[",
                    RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",",
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",",
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0],
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0],
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1],
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame ->
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666],
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize ->
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]],
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {},
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]},
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]],
                    SelectionMove[Typeset`box$, All, Expression];
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1;
                    FrontEnd`Private`$ColorSelectorInitialColor =
                    RGBColor[0, 0, 1];
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True;
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$,
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top},
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged",
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator ->
                    Automatic, Method -> "Preemptive"],
                    RGBColor[0, 0, 1], Editable -> False, Selectable ->
                    False]}], "]"}]}], "}"}], ",",
               RowBox[{"{",
                 RowBox[{#, ",", #2}], "}"}], ",",
               RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",",
               RowBox[{"LabelStyle", "\[Rule]",
                 RowBox[{"{",
                   RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0],
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0],
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0],
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame ->
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None,
                    PlotRangePadding -> None, ImageSize ->
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"],
                    Appearance -> None, BaseStyle -> {}, BaselinePosition ->
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :>
                    With[{Typeset`box$ = EvaluationBox[]},
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]],
                    SelectionMove[Typeset`box$, All, Expression];
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1;
                    FrontEnd`Private`$ColorSelectorInitialColor =
                    GrayLevel[0];
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True;
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$,
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top},
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged",
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator ->
                    Automatic, Method -> "Preemptive"],
                    GrayLevel[0], Editable -> False, Selectable -> False],
                    ",", "16"}], "}"}]}], ",",
               RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}]}], "]"}]& ),
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(FormBox[
        GridBox[{{
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"],
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline],
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"]}},
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}},
         AutoDelete -> False, GridBoxItemSize -> Automatic,
         BaselinePosition -> {2, 1}], TraditionalForm]& ),
      Editable->True,
      InterpretationFunction->(FormBox[
        RowBox[{"Legended", "(",
          RowBox[{#, ",",
            RowBox[{"Placed", "[",
              RowBox[{#2, ",", "Above"}], "]"}]}], ")"}],
        TraditionalForm]& )], {192., -189.}, {Center, Center}, {360., 360.}],
    InsetBox[
     TemplateBox[{GraphicsBox[{{{}, {}, {
           Directive[
            Opacity[1.],
            AbsoluteThickness[1.6],
            RGBColor[0, 0, 1]],
           LineBox[CompressedData["
1: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
aFEgtOjZKA0utuVyuOxrddT6yc9DZ5wGd3pgmHU5Rh1ladyTnZukwSeZWms+
xFL7L7vW+2Ga2v+r8K6uN+rortXZMJs5GvzF7fVhznh1ZDN8woBrkQZnMnry
T/OtOsLcjqwVLNPgEmIl6irv1dH8xZE7Bms0uEDqgJHtJ3WUespruWqDuu94
ixHPFHUkYvBtoZWeFheiSyr+8UMdMQvsmJ7koMVXTbL1pkvUUUNe19AuUVo8
tT25IGRYHV1id6m5YUSLGyvzHg4V1UASJKYjSya0+KxUVAd5rwbqno+tvH+U
Fn/iniJVIqWBzHpqy58co8XbDY6y/VHQQGrflItiT9HiYeI625ZBA9Fbr/38
fYMWZ/GaJcxOaqDod0/fikbT4h9qRB+NBmqgUwcoWt0xtPhWyeLrB4I1kEhf
a0NkHC1+7gBvwsswDfRhz15Gnve0uFf9uzaFaA2UHpl3niaNFj+qrVcqm6SB
KoLmZTtLaPE/SQbvdPM10Npd+8zwGVr8gtGgBMM/DYR2MZmazdPibTwRJeUz
Gsg76/Mf9iVa/PK4+EzAvAZiWVze6bNOiz+c75mhWdVA22+E3buxhYSfFvNs
/86oieQulO8/uoeEG7xpwk12aSK7Y0qVW4xIeD8l2Hy/jiay32XyJtOEhG+k
8JnfOKCJHHrP3Dh3lITbJP8xfqOriZwuv+QvOkbCtfWZ1SYMNNEFn+UzD+xJ
+PtrnpInzDSR63e0Pn+ThDM/1LJwPa2J3O601ia4k3Arm/jlM06a6JbO9DuL
OyQ8TiWbMD+riW5XihqlPSDhzhZR8aIXNZHnoO/LywEknM1RWDTsmiby32Yi
P/CGms+GsRt5aqKn7WfoQt6ScJrObNObXproWdz9Jp1EEn4x0JFO4pEmCpJN
vRv7iYTnBXLL3PXVRC9mSo8c/kLC5XVOvhf200TBP3tF1lJJeNbI7osFTzRR
mO7WshMZJBxfflG18lQThbPKRG/5ScJbE71dgwM10avag1cys0n429/XL4oH
aaKIl7b7z+WQ8D/H7qalv9BEkbZu27bnkfCQEXQYD9FE0aLPRwoLSPgpmgxZ
yzBN9PrP++wbxSTcO0C+Hr3SRDEpKFCkjITPDGock4zWRG9utjrU/ibhB9hO
pz+N1URxmtNKD6pIeMUS5d94vCaKp2VlJteScPMPwGacqIkSnml9edpEwvV2
63avJ2uijwmxy4d6SbguE8MWyNJE3xvPhOTMk/DCh+cm9jVQ50ErqgBLJPw7
/50XIs2a6KJsT1XuCgkvyFB7xNemiQR9TrDk0dDhH6cyLFa7NZGv0hGvAhY6
XNOAOeftX01kGaJ2pVSQDq8QuSd4naSFFo6yGtXp0eGnX7N3cslpobq7pSNm
BnS4seAxm3R5LZT8wce33ogOXzD9onmMooXsaWjyG47S4Vk3xgSeq2mh0pRZ
teYTdPhY+vbb/fu10CuOLokOFzr8quyaGOdxLaRekUoaCqfDH7T+83O7p4UE
4u9kRUfQ4Wl+TRJLnlqIxl3vunk0HR6eXVfk/pAaT7SjF8XR4bUyZ1iuPNZC
lneY8qKS6XBJCfsi1Rda6LqUnadpPh1uWbUfabyj1ufHuvprnA6fzVJvZivV
QkF2Td9uTNHhe3aF4grlWuiGUpyz1Awd/pyhodisQgtp9Ki0v1ykw9V3JMg+
q9FCZaqns67T0eO2HBz3u1u00NBQprskPz3Ox5+1sDyihcp/PZLv3kWPZ7SY
vv43qoU+Bx8eCROkxwX+PXUZHNNCrtoDx+nE6HGn3M8vC6e0EF04p2qXHD0e
/XlB0GGRGs+5bSJUgR5XzKHX0lmmxtNJSDRSoscnZfY/FVzVQsHjGtt/qtPj
6Xt2l9dsaCG3AoaqK1r0uKny258JtBiyjqjxkQB6nKNcqucWHYa0rkRhnTr0
uIRKkvYhBgwJ6Z6dCzlIj+/EeJu2MmFIWUn5RfoQVU/9MGbxCkPd08/K3vow
4L8uCT+t3qGNxiimPvyKjPh2gqw/Ea6NJP7KjtLWM+IFnsO92zkBFYrdrLvq
xYTr2sqV6TwE9Lyh0dFMjBmnLLs8rJ0ENGmOXpAKmXGeJ61T3/fiKO3YtgPq
17bgoe+4OVhtcPS28tHrPh4WPEVkke6CH44WSmzu8OSz4GCoMxz3A0c9L3Ln
uFxYcfcE+ZqmPhzN12ryP+Rgw0NWB5c9tuigq6EiyOMXG56b5/zhnIIO2lEp
wjVgx46TIj7VRVjoIPPG5FWBdXbc/r1D8g43HTR9Ku5Sx0cOXJFwa7rwSgfl
2qf4cBhz4k5FT3JFf+igrOpLRl2HOfHDKwZlH6icoS3F/cWUE9+id/yLbKYO
ShZIiDY5zokL/TjMovpTB0W2RH57epoTNzI/t0U/WwfdPOrby+LBib/f1i/s
mKuDpHFbjCmRE/8S0i+UVKKDJFJ20jV/4MTLnuV3yJTqIBHBltLET5y4V8Br
j1Qq862aWeh95cQ9Vw9Z/ijTQYyZ+s4+vzjxmaNXowp+66BeslIEXT0nbsbD
fKypWgd1xPyzq2/kxNWvvReyqqH+V5Y9RextCyeuX6VT2Urlqr/7Uvd3ceIe
N8+WddTqoF/v95R4/eHEn3edNemt10GZ2zufmo5x4q9+NQqdbtBB33wizYQn
qfP4q9XYR+WPjtu60CwnfvzOdE9/ow5KqKt7G7TAictMgJpTkw56oxN0wX6Z
E09qfHR1gMrRqSZk+TWq/pl44tSsg17uYZ3b2ODEXUbHHg1Q+f8AJOLKkA==

            "]]}}}, {
        DisplayFunction -> Identity, AspectRatio ->
         NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True},
         AxesLabel -> {
           FormBox["\"t\"", TraditionalForm],
           FormBox["\"\"", TraditionalForm]}, AxesOrigin -> {0, 0},
         DisplayFunction :> Identity,
         Frame -> {{False, False}, {False, False}},
         FrameLabel -> {{None, None}, {None, None}},
         FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}},
         GridLines -> {None, None}, GridLinesStyle -> Directive[
           GrayLevel[0.5, 0.4]], ImageSize -> Full, LabelStyle -> {
           GrayLevel[0], 16},
         Method -> {
          "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" ->
           AbsolutePointSize[6], "ScalingFunctions" -> None},
         PlotRange -> {All, All}, PlotRangeClipping -> True,
         PlotRangePadding -> {{
            Scaled[0.02],
            Scaled[0.02]}, {
            Scaled[0.05],
            Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}],FormBox[
        FormBox[
         TemplateBox[{
          "\"\\!\\(\\*SuperscriptBox[\\(\[CapitalDelta]\[Sigma]\\), \
\\(2\\)]\\)\""}, "LineLegend", DisplayFunction -> (FormBox[
            StyleBox[
             StyleBox[
              PaneBox[
               TagBox[
                GridBox[{{
                   TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3],
                    GrayLevel[0]]],
                    PointSize[0.5],
                    Opacity[1.],
                    AbsoluteThickness[1.6],
                    RGBColor[0, 0, 1]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3],
                    GrayLevel[0]]],
                    PointSize[0.5],
                    Opacity[1.],
                    AbsoluteThickness[1.6],
                    RGBColor[0, 0, 1]], {}}}, AspectRatio -> Full,
                    ImageSize -> {20, 10}, PlotRangePadding -> None,
                    ImagePadding -> Automatic,
                    BaselinePosition -> (Scaled[-0.086] -> Baseline)], #}},
                    GridBoxAlignment -> {
                    "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}},
                    AutoDelete -> False,
                    GridBoxDividers -> {
                    "Columns" -> {{False}}, "Rows" -> {{False}}},
                    GridBoxItemSize -> {
                    "Columns" -> {{All}}, "Rows" -> {{All}}},
                    GridBoxSpacings -> {"Columns" -> {{0.8, 0.5}}}],
                    "Grid"]}},
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete ->
                 False, GridBoxDividers -> {
                  "Columns" -> {{None}}, "Rows" -> {{None}}},
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {"Columns" -> {{0}}, "Rows" -> {{1}}}],
                "Grid"], Alignment -> Left, AppearanceElements -> None,
               ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction ->
               "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
              GrayLevel[0], FontSize -> 16, FontFamily -> "Arial"},
             Background -> Automatic, StripOnInput -> False],
            TraditionalForm]& ),
          InterpretationFunction :> (RowBox[{"LineLegend", "[",
             RowBox[{
               RowBox[{"{",
                 RowBox[{"Directive", "[",
                   RowBox[{
                    RowBox[{"Opacity", "[", "1.`", "]"}], ",",
                    RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",",
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0],
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0],
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1],
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame ->
                    True, FrameStyle -> RGBColor[0., 0., 0.6666666666666666],
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize ->
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]],
                    "RGBColor[0, 0, 1]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {},
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]},
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]],
                    SelectionMove[Typeset`box$, All, Expression];
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1;
                    FrontEnd`Private`$ColorSelectorInitialColor =
                    RGBColor[0, 0, 1];
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True;
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$,
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top},
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged",
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator ->
                    Automatic, Method -> "Preemptive"],
                    RGBColor[0, 0, 1], Editable -> False, Selectable ->
                    False]}], "]"}], "}"}], ",",
               RowBox[{"{", #, "}"}], ",",
               RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",",
               RowBox[{"LabelStyle", "\[Rule]",
                 RowBox[{"{",
                   RowBox[{
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0],
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0],
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0],
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame ->
                    True, FrameStyle -> GrayLevel[0.], FrameTicks -> None,
                    PlotRangePadding -> None, ImageSize ->
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0]"],
                    Appearance -> None, BaseStyle -> {}, BaselinePosition ->
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :>
                    With[{Typeset`box$ = EvaluationBox[]},
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]],
                    SelectionMove[Typeset`box$, All, Expression];
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1;
                    FrontEnd`Private`$ColorSelectorInitialColor =
                    GrayLevel[0];
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True;
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$,
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top},
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged",
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator ->
                    Automatic, Method -> "Preemptive"],
                    GrayLevel[0], Editable -> False, Selectable -> False],
                    ",", "16"}], "}"}]}], ",",
               RowBox[{"LegendLayout", "\[Rule]", "\"Row\""}]}], "]"}]& ),
          Editable -> True], TraditionalForm], TraditionalForm]},
      "Legended",
      DisplayFunction->(FormBox[
        GridBox[{{
           ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}, {
           TagBox[
            ItemBox[
             PaneBox[
              TagBox[#, "SkipImageSizeLevel"],
              Alignment -> {Center, Baseline}, BaselinePosition -> Baseline],
             DefaultBaseStyle -> "Labeled"], "SkipImageSizeLevel"]}},
         GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}},
         AutoDelete -> False, GridBoxItemSize -> Automatic,
         BaselinePosition -> {2, 1}], TraditionalForm]& ),
      Editable->True,
      InterpretationFunction->(FormBox[
        RowBox[{"Legended", "(",
          RowBox[{#, ",",
            RowBox[{"Placed", "[",
              RowBox[{#2, ",", "Above"}], "]"}]}], ")"}],
        TraditionalForm]& )], {576., -189.}, {
     Center, Center}, {360., 360.}]}, {}},
  ContentSelectable->True,
  ImageSize->Full,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{
  3.6720634447524757`*^9, 3.672063485932691*^9, {3.672063516193673*^9,
   3.6720635367626057`*^9}, {3.6720635956421947`*^9, 3.672063626382739*^9}, {
   3.6720636727904053`*^9, 3.6720636803498373`*^9}, 3.672119284362895*^9, {
   3.672120651524744*^9, 3.67212066905471*^9}, 3.672121550760507*^9,
   3.672492516555119*^9, 3.672494353816749*^9, {3.673192123161427*^9,
   3.673192128688479*^9}, 3.673192190931878*^9, 3.676609725185464*^9,
   3.676610113367969*^9, 3.6766103572010927`*^9, 3.676610492028995*^9,
   3.676610581098456*^9, 3.676610661060836*^9, 3.6766107125601673`*^9, {
   3.6767124507316227`*^9, 3.676712456257984*^9}, 3.676712558203348*^9, {
   3.676712653243886*^9, 3.676712657853381*^9}, {3.676712727763277*^9,
   3.67671273769753*^9}, 3.676712773783091*^9, 3.6798343912614603`*^9,
   3.679834647036812*^9, 3.6798347578069887`*^9, 3.679835737410954*^9,
   3.679835830462071*^9, 3.679836130380518*^9}]
}, Open  ]],

Cell["\<\
The following table gives some values of the variance of the two estimator, \
the probability of no crossing and the relative difference for several time \
horizons\
\>", "Text",
 CellChangeTimes->{{3.6721193392429037`*^9, 3.672119375699293*^9}, {
  3.672119423955247*^9, 3.6721194995578127`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[",
  RowBox[{"SurvivalCrossingTimeMPTTUpperBoundary", "[",
   RowBox[{
   "W", ",", "\[Nu]", ",", "4", ",", "h", ",", "Inverseh", ",", "\[Beta]"}],
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6798355990801697`*^9, 3.679835622159472*^9}, {
   3.67983567569359*^9, 3.679835678755558*^9}, 3.679835732870309*^9,
   3.6798358359050493`*^9, {3.679835972759429*^9, 3.6798359733711243`*^9}, {
   3.679836039207055*^9, 3.679836040164193*^9}, {3.679836145676148*^9,
   3.6798361462797422`*^9}}],

Cell[BoxData["0.5626187523451556`"], "Output",
 CellChangeTimes->{{3.6798355997598543`*^9, 3.679835619074266*^9}, {
   3.6798356630139627`*^9, 3.679835679124172*^9}, 3.679835722056814*^9,
   3.6798358391618023`*^9, {3.679836032446712*^9, 3.679836040852886*^9}, {
   3.67983613435887*^9, 3.679836147124208*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TeXForm", "[",
  RowBox[{"N", "[",
   RowBox[{"Table", "[",
    RowBox[{
     RowBox[{"{",
      RowBox[{"t", ",", "\[IndentingNewLine]",
       RowBox[{"SurvivalCrossingTimeMPTTUpperBoundary", "[",
        RowBox[{
        "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",",
         "\[Beta]"}], "]"}], "\[IndentingNewLine]", ",",
       RowBox[{"VarianceAPMCCrossingTimeMPTTUpperBoundary", "[",
        RowBox[{
        "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",",
         "\[Beta]"}], "]"}], ",",
       RowBox[{"VarianceCMCCrossingTimeMPTTUpperBoundary", "[",
        RowBox[{
        "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",",
         "\[Beta]"}], "]"}], ",", "\[IndentingNewLine]",
       RowBox[{"DeltaVarianceCMCAPMCCrossingTimeMPTTUpperBoundary", "[",
        RowBox[{
        "W", ",", "\[Nu]", ",", "t", ",", "h", ",", "Inverseh", ",",
         "\[Beta]"}], "]"}]}], "}"}], "\[IndentingNewLine]", ",",
     RowBox[{"{",
      RowBox[{"t", ",", "1", ",", "4", ",", "1"}], "}"}]}], "]"}], "]"}],
  "]"}]], "Input",
 CellChangeTimes->{{3.67211961807867*^9, 3.672119769729793*^9}, {
  3.672119817195122*^9, 3.672119819333864*^9}, {3.673192220581998*^9,
  3.67319222707234*^9}, {3.6766112977557907`*^9, 3.6766113305257807`*^9}, {
  3.67983552643272*^9, 3.6798355436255493`*^9}, {3.679836043242238*^9,
  3.679836052682301*^9}, {3.679836151356512*^9, 3.679836153142549*^9}}],

Cell["\<\
\\left(
\\begin{array}{ccccc}
 1. & 0.62963 & 0.196159 & 0.233196 & -15.8824 \\\\
 2. & 0.568265 & 0.184338 & 0.24534 & -24.8643 \\\\
 3. & 0.562963 & 0.167682 & 0.246036 & -31.8464 \\\\
 4. & 0.562619 & 0.158262 & 0.246079 & -35.6867 \\\\
\\end{array}
\\right)\
\>", "Output",
 CellChangeTimes->{
  3.6721197122452087`*^9, {3.672119745553644*^9, 3.6721197708794203`*^9},
   3.672119820655014*^9, 3.673192228232773*^9, 3.676611332930909*^9,
   3.676712784851858*^9, 3.679834552485516*^9, 3.6798355340149393`*^9,
   3.67983559085931*^9, 3.67983596996274*^9, {3.679836045004551*^9,
   3.679836054123172*^9}, {3.679836136190859*^9, 3.6798361542055063`*^9}}]
}, Open  ]],

Cell["\<\
The fact that the APMC estimator is better from a variance point of view \
implies that it will be a more reliable statistical estimator if data were to \
be available. The other appealing feature is that we only need the number of \
jumps up to time t to evaluate the APMC estimator, it is not necessary to \
keep track of the jump times which are in practical situation often unknown. \
The cost is of course the parametric assumption we make by stating that we \
are dealing with an OSPP, of which the associated \[Mu](t) function has to be \
identified. We can argue that the mixed Poisson process alone is widely used \
for modelization purposes and is well suited for many phenomena. The reader \
is now encouraged to try out some parametrization of the OSPP or the upper \
boundary and see how large (or how little) the reduction of variance may be \
in different situation. Hereafter the different shape for the upper boundary \
\
\>", "Text",
 CellChangeTimes->{{3.672406879289229*^9, 3.672407113400988*^9}, {
  3.672407146295315*^9, 3.672407260877554*^9}, {3.672464717342619*^9,
  3.672464729791175*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[",
  RowBox[{"ShapeFunctions", "=",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"\"\<Polynomial\>\"", ",",
       RowBox[{"Function", "[",
        RowBox[{
         RowBox[{"{", "x", "}"}], ",",
         RowBox[{"c", "*",
          RowBox[{"x", "^",
           RowBox[{"(", "d", ")"}]}]}]}], "]"}], ",",
       RowBox[{"Function", "[",
        RowBox[{
         RowBox[{"{", "x", "}"}], ",",
         RowBox[{
          RowBox[{"(",
           RowBox[{"x", "/", "c"}], ")"}], "^",
          RowBox[{"(",
           RowBox[{"1", "/", "d"}], ")"}]}]}], "]"}]}], "}"}], ",",
     RowBox[{"{",
      RowBox[{"\"\<Exponential\>\"", ",",
       RowBox[{"Function", "[",
        RowBox[{
         RowBox[{"{", "x", "}"}], ",",
         RowBox[{"c", "*",
          RowBox[{"(",
           RowBox[{
            RowBox[{"Exp", "[",
             RowBox[{"d", "*", "x"}], "]"}], "-", "1"}], ")"}]}]}], "]"}],
       ",",
       RowBox[{"Function", "[",
        RowBox[{
         RowBox[{"{", "x", "}"}], ",",
         RowBox[{
          RowBox[{"Log", "[",
           RowBox[{
            RowBox[{"x", "/", "c"}], "+", "1"}], "]"}], "/", "d"}]}], "]"}]}],
       "}"}], ",",
     RowBox[{"{",
      RowBox[{"\"\<Logarithmic\>\"", ",",
       RowBox[{"Function", "[",
        RowBox[{
         RowBox[{"{", "x", "}"}], ",",
         RowBox[{"c", "*",
          RowBox[{"Log", "[",
           RowBox[{"1", "+",
            RowBox[{"d", "*", "x"}]}], "]"}]}]}], "]"}], ",",
       RowBox[{"Function", "[",
        RowBox[{
         RowBox[{"{", "x", "}"}], ",",
         RowBox[{
          RowBox[{"(",
           RowBox[{
            RowBox[{"Exp", "[",
             RowBox[{"x", "/", "c"}], "]"}], "-", "1"}], ")"}], "/", "d"}]}],
        "]"}]}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.676611340202531*^9, 3.6766113659820337`*^9}, {
  3.676712792532054*^9, 3.676712840644121*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"Polynomial\"\>",
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "x", "}"}], ",",
        RowBox[{"c", " ",
         SuperscriptBox["x", "d"]}]}], "]"}],
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "x", "}"}], ",",
        SuperscriptBox[
         RowBox[{"(",
          FractionBox["x", "c"], ")"}],
         RowBox[{"1", "/", "d"}]]}], "]"}]},
     {"\<\"Exponential\"\>",
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "x", "}"}], ",",
        RowBox[{"c", " ",
         RowBox[{"(",
          RowBox[{
           RowBox[{"Exp", "[",
            RowBox[{"d", " ", "x"}], "]"}], "-", "1"}], ")"}]}]}], "]"}],
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "x", "}"}], ",",
        FractionBox[
         RowBox[{"Log", "[",
          RowBox[{
           FractionBox["x", "c"], "+", "1"}], "]"}], "d"]}], "]"}]},
     {"\<\"Logarithmic\"\>",
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "x", "}"}], ",",
        RowBox[{"c", " ",
         RowBox[{"Log", "[",
          RowBox[{"1", "+",
           RowBox[{"d", " ", "x"}]}], "]"}]}]}], "]"}],
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "x", "}"}], ",",
        FractionBox[
         RowBox[{
          RowBox[{"Exp", "[",
           FractionBox["x", "c"], "]"}], "-", "1"}], "d"]}], "]"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]},
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]},
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$,
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.672464754420857*^9, 3.673192231537034*^9,
  3.6767128409631453`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Variance reduction for Mixed Poisson process with a time transformation\
\>", "Subsection",
 CellChangeTimes->{{3.672407335190473*^9, 3.67240735595049*^9}}],

Cell["\<\
We consider the case of the homogeneous Poisson process hereafter. We can \
first have a look at the probability \[DoubleStruckCapitalP][U\
\[LessSlantEqual]N(t)\[LessSlantEqual]h(t)+U] as it closely linked to the \
reduction of the variance imlied y the use of the APMC estimator,\
\>", "Text",
 CellChangeTimes->{{3.67246470651062*^9, 3.6724647110455236`*^9}, {
  3.672464763216791*^9, 3.672464781927813*^9}, {3.676715323053965*^9,
  3.676715363864646*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]",
   RowBox[{
    RowBox[{
     RowBox[{"W", "=",
      RowBox[{"TransformedDistribution", "[",
       RowBox[{
        RowBox[{"\[Lambda]", "*", "B"}], ",",
        RowBox[{"B", "\[Distributed]",
         RowBox[{"BinomialDistribution", "[",
          RowBox[{"1", ",", "1"}], "]"}]}]}], "]"}]}], ";",
     RowBox[{"\[Nu]", "=",
      RowBox[{"Function", "[",
       RowBox[{
        RowBox[{"{", "t", "}"}], ",", "t"}], "]"}]}], ";",
     "\[IndentingNewLine]",
     RowBox[{"cTemp", "=", "c"}], ";", "\[IndentingNewLine]",
     RowBox[{"dTemp", "=", "d"}], ";", "\[IndentingNewLine]",
     RowBox[{"ShapeFunctions", "=",
      RowBox[{"{",
       RowBox[{
        RowBox[{"{",
         RowBox[{"\"\<Polynomial\>\"", ",",
          RowBox[{"Function", "[",
           RowBox[{
            RowBox[{"{", "x", "}"}], ",",
            RowBox[{"cTemp", "*",
             RowBox[{"x", "^",
              RowBox[{"(", "dTemp", ")"}]}]}]}], "]"}], ",",
          RowBox[{"Function", "[",
           RowBox[{
            RowBox[{"{", "x", "}"}], ",",
            RowBox[{
             RowBox[{"(",
              RowBox[{"x", "/", "cTemp"}], ")"}], "^",
             RowBox[{"(",
              RowBox[{"1", "/", "dTemp"}], ")"}]}]}], "]"}]}], "}"}], ",",
        RowBox[{"{",
         RowBox[{"\"\<Exponential\>\"", ",",
          RowBox[{"Function", "[",
           RowBox[{
            RowBox[{"{", "x", "}"}], ",",
            RowBox[{"cTemp", "*",
             RowBox[{"(",
              RowBox[{
               RowBox[{"Exp", "[",
                RowBox[{"dTemp", "*", "x"}], "]"}], "-", "1"}], ")"}]}]}],
           "]"}], ",",
          RowBox[{"Function", "[",
           RowBox[{
            RowBox[{"{", "x", "}"}], ",",
            RowBox[{
             RowBox[{"Log", "[",
              RowBox[{
               RowBox[{"x", "/", "cTemp"}], "+", "1"}], "]"}], "/",
             "dTemp"}]}], "]"}]}], "}"}], ",",
        RowBox[{"{",
         RowBox[{"\"\<Logarithmic\>\"", ",",
          RowBox[{"Function", "[",
           RowBox[{
            RowBox[{"{", "x", "}"}], ",",
            RowBox[{"cTemp", "*",
             RowBox[{"Log", "[",
              RowBox[{"1", "+",
               RowBox[{"dTemp", "*", "x"}]}], "]"}]}]}], "]"}], ",",
          RowBox[{"Function", "[",
           RowBox[{
            RowBox[{"{", "x", "}"}], ",",
            RowBox[{
             RowBox[{"(",
              RowBox[{
               RowBox[{"Exp", "[",
                RowBox[{"x", "/", "cTemp"}], "]"}], "-", "1"}], ")"}], "/",
             "dTemp"}]}], "]"}]}], "}"}]}], "}"}]}], ";",
     "\[IndentingNewLine]",
     RowBox[{"h", "=", "shape"}], ";", "\[IndentingNewLine]",
     RowBox[{"Plot", "[",
      RowBox[{
       RowBox[{"Sum", "[",
        RowBox[{
         RowBox[{"PDFMPTT", "[",
          RowBox[{"W", ",", "\[Nu]", ",", "n", ",", "t"}], "]"}], ",",
         RowBox[{"{",
          RowBox[{"n", ",",
           RowBox[{"Floor", "[", "\[Beta]", "]"}], ",",
           RowBox[{"Floor", "[",
            RowBox[{
             RowBox[{"h", "[", "t", "]"}], "+", "\[Beta]"}], "]"}], ",",
           "1"}], "}"}]}], "]"}], ",",
       RowBox[{"{",
        RowBox[{"t", ",", "1", ",", "4"}], "}"}], ",",
       RowBox[{"PlotRange", "\[Rule]", "All"}], ",",
       RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",",
       RowBox[{"ImageSize", "\[Rule]", "Large"}], ",",
       RowBox[{"LabelStyle", "\[Rule]",
        RowBox[{"Directive", "[",
         RowBox[{"Black", ",", "16"}], "]"}]}], ",",
       RowBox[{"AxesLabel", "\[Rule]",
        RowBox[{"{",
         RowBox[{"\"\<t\>\"", ",", "\"\<\>\""}], "}"}]}], ",",
       RowBox[{"Frame", "->", "True"}], ",",
       RowBox[{"FrameLabel", "\[Rule]",
        RowBox[{"{",
         RowBox[{
          RowBox[{"{",
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",",
          RowBox[{"{",
           RowBox[{
           "\"\<t\>\"", ",",
            "\"\<\[DoubleStruckCapitalP][\[Beta]\[LessSlantEqual]N(t)\
\[LessSlantEqual]h(t)+\[Beta]]\>\""}], "}"}]}], "}"}]}]}], "]"}]}],
    "\[IndentingNewLine]", ",",
    RowBox[{"{",
     RowBox[{
      RowBox[{"{",
       RowBox[{"\[Lambda]", ",", "1", ",",
        RowBox[{"Style", "[",
         RowBox[{
         "\"\<Intensity of the Poisson process\>\"", ",", "Blue", ",", "14"}],
          "]"}]}], "}"}], ",", "1", ",", "5", ",",
      RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
    RowBox[{"{",
     RowBox[{
      RowBox[{"{",
       RowBox[{"\[Beta]", ",", "0", ",",
        RowBox[{"Style", "[",
         RowBox[{"\"\<\[Beta]\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}],
      ",", "0", ",", "5", ",",
      RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
    RowBox[{"{",
     RowBox[{
      RowBox[{"{",
       RowBox[{"shape", ",",
        RowBox[{"ShapeFunctions", "[",
         RowBox[{"[",
          RowBox[{"1", ",", "2"}], "]"}], "]"}], ",",
        RowBox[{"Style", "[",
         RowBox[{"\"\<Shape of boundary\>\"", ",", "Blue", ",", "14"}],
         "]"}]}], "}"}], ",", "\[IndentingNewLine]",
      RowBox[{"Table", "[",
       RowBox[{
        RowBox[{
         RowBox[{"ShapeFunctions", "[",
          RowBox[{"[",
           RowBox[{"k", ",", "2"}], "]"}], "]"}], "\[Rule]",
         RowBox[{"Style", "[",
          RowBox[{
           RowBox[{"ShapeFunctions", "[",
            RowBox[{"[",
             RowBox[{"k", ",", "1"}], "]"}], "]"}], ",", "Black", ",", "14"}],
           "]"}]}], ",",
        RowBox[{"{",
         RowBox[{"k", ",", "1", ",",
          RowBox[{"Length", "[", "ShapeFunctions", "]"}]}], "}"}]}], "]"}]}],
     "}"}], "\[IndentingNewLine]", ",",
    RowBox[{"{",
     RowBox[{
      RowBox[{"{",
       RowBox[{"c", ",", "1", ",",
        RowBox[{"Style", "[",
         RowBox[{"\"\<c\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
      "1", ",", "5", ",", "0.5"}], "}"}], "\[IndentingNewLine]", ",",
    RowBox[{"{",
     RowBox[{
      RowBox[{"{",
       RowBox[{"d", ",", "0.5", ",",
        RowBox[{"Style", "[",
         RowBox[{"\"\<d\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
      "0.5", ",", "2", ",", "0.5"}], "}"}]}], "\[IndentingNewLine]", "]"}],
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.672465283700498*^9, 3.67246528440586*^9}, {
  3.672468265146257*^9, 3.672468265808012*^9}, {3.672495227811303*^9,
  3.6724952368086443`*^9}, {3.672495269137457*^9, 3.672495298891803*^9}, {
  3.6724954354252663`*^9, 3.672495444753009*^9}, {3.676611389001586*^9,
  3.676611527473426*^9}, {3.6766116543765163`*^9, 3.676611659983741*^9}, {
  3.6767153779579763`*^9, 3.676715547904915*^9}, {3.6767158535560627`*^9,
  3.6767158554195757`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 2., $CellContext`d$$ =
    2., $CellContext`shape$$ =
    Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp], $CellContext`\[Beta]$$ =
    1, $CellContext`\[Lambda]$$ = 4, Typeset`show$$ = True,
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ =
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Lambda]$$], 1,
       Style["Intensity of the Poisson process",
        RGBColor[0, 0, 1], 14]}, 1, 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`\[Beta]$$], 0,
       Style["\[Beta]",
        RGBColor[0, 0, 1], 14]}, 0, 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`shape$$],
       Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],
       Style["Shape of boundary",
        RGBColor[0, 0, 1], 14]}, {
      Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp] -> Style["Polynomial",
         GrayLevel[0], 14],
       Function[{$CellContext`x}, $CellContext`cTemp (
          Exp[$CellContext`dTemp $CellContext`x] - 1)] -> Style["Exponential",
         GrayLevel[0], 14],
       Function[{$CellContext`x}, $CellContext`cTemp
         Log[1 + $CellContext`dTemp $CellContext`x]] -> Style["Logarithmic",
         GrayLevel[0], 14]}}, {{
       Hold[$CellContext`c$$], 1,
       Style["c",
        RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{
       Hold[$CellContext`d$$], 0.5,
       Style["d",
        RGBColor[0, 0, 1], 14]}, 0.5, 2, 0.5}}, Typeset`size$$ = {
    576., {189., 193.}}, Typeset`update$$ = 0, Typeset`initDone$$,
    Typeset`skipInitDone$$ = True, $CellContext`\[Lambda]$89450$$ =
    0, $CellContext`\[Beta]$89451$$ = 0, $CellContext`shape$89452$$ =
    False, $CellContext`c$89453$$ = 0, $CellContext`d$89454$$ = 0},
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm,
      "Variables" :> {$CellContext`c$$ = 1, $CellContext`d$$ =
        0.5, $CellContext`shape$$ =
        Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp], $CellContext`\[Beta]$$ =
        0, $CellContext`\[Lambda]$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Lambda]$$, $CellContext`\[Lambda]$89450$$, 0],
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$89451$$, 0],
        Hold[$CellContext`shape$$, $CellContext`shape$89452$$, False],
        Hold[$CellContext`c$$, $CellContext`c$89453$$, 0],
        Hold[$CellContext`d$$, $CellContext`d$89454$$, 0]},
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$,
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$,
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$},
      "Body" :> ($CellContext`W =
        TransformedDistribution[$CellContext`\[Lambda]$$ $CellContext`B,
          Distributed[$CellContext`B,
           BinomialDistribution[1, 1]]]; $CellContext`\[Nu] =
        Function[{$CellContext`t}, $CellContext`t]; $CellContext`cTemp = \
$CellContext`c$$; $CellContext`dTemp = $CellContext`d$$; \
$CellContext`ShapeFunctions = {{"Polynomial",

           Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],

           Function[{$CellContext`x}, ($CellContext`x/$CellContext`cTemp)^(
             1/$CellContext`dTemp)]}, {"Exponential",

           Function[{$CellContext`x}, $CellContext`cTemp (
             Exp[$CellContext`dTemp $CellContext`x] - 1)],

           Function[{$CellContext`x},
            Log[$CellContext`x/$CellContext`cTemp + 1]/$CellContext`dTemp]}, {
          "Logarithmic",

           Function[{$CellContext`x}, $CellContext`cTemp
            Log[1 + $CellContext`dTemp $CellContext`x]],

           Function[{$CellContext`x}, (Exp[$CellContext`x/$CellContext`cTemp] -
             1)/$CellContext`dTemp]}}; $CellContext`h = $CellContext`shape$$;
       Plot[
         Sum[
          $CellContext`PDFMPTT[$CellContext`W, $CellContext`\[Nu], \
$CellContext`n, $CellContext`t], {$CellContext`n,
           Floor[$CellContext`\[Beta]$$],
           Floor[$CellContext`h[$CellContext`t] + $CellContext`\[Beta]$$],
           1}], {$CellContext`t, 1, 4}, PlotRange -> All, PlotStyle -> Blue,
         ImageSize -> Large, LabelStyle -> Directive[Black, 16],
         AxesLabel -> {"t", ""}, Frame -> True,
         FrameLabel -> {{"", ""}, {
           "t", "\[DoubleStruckCapitalP][\[Beta]\[LessSlantEqual]N(t)\
\[LessSlantEqual]h(t)+\[Beta]]"}}]),
      "Specifications" :> {{{$CellContext`\[Lambda]$$, 1,
          Style["Intensity of the Poisson process",
           RGBColor[0, 0, 1], 14]}, 1, 5,
         Rational[1, 2]}, {{$CellContext`\[Beta]$$, 0,
          Style["\[Beta]",
           RGBColor[0, 0, 1], 14]}, 0, 5,
         Rational[1, 2]}, {{$CellContext`shape$$,

          Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],
          Style["Shape of boundary",
           RGBColor[0, 0, 1], 14]}, {
         Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp] -> Style["Polynomial",
            GrayLevel[0], 14],
          Function[{$CellContext`x}, $CellContext`cTemp (
             Exp[$CellContext`dTemp $CellContext`x] - 1)] ->
          Style["Exponential",
            GrayLevel[0], 14],
          Function[{$CellContext`x}, $CellContext`cTemp
            Log[1 + $CellContext`dTemp $CellContext`x]] ->
          Style["Logarithmic",
            GrayLevel[0], 14]}}, {{$CellContext`c$$, 1,
          Style["c",
           RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{$CellContext`d$$, 0.5,
          Style["d",
           RGBColor[0, 0, 1], 14]}, 0.5, 2, 0.5}}, "Options" :> {},
      "DefaultOptions" :> {}],
     ImageSizeCache->{621., {290., 295.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.672465189160857*^9, 3.672465287020348*^9, {3.672468266903274*^9,
   3.672468292284782*^9}, 3.672492560451552*^9, 3.6724944927869167`*^9,
   3.672495205167809*^9, {3.672495287817584*^9, 3.6724952995523653`*^9},
   3.673192248536191*^9, {3.67661149199572*^9, 3.6766115024681883`*^9},
   3.676611539425725*^9, 3.676611570093748*^9, 3.676611661758597*^9, {
   3.676715530953019*^9, 3.676715548486045*^9}, 3.6767158571370296`*^9}]
}, {2}]],

Cell["And then of course see what happens in term of variance", "Text",
 CellChangeTimes->{{3.672465216878701*^9, 3.672465233966262*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]",
  RowBox[{
   RowBox[{
    RowBox[{"W", "=",
     RowBox[{"TransformedDistribution", "[",
      RowBox[{
       RowBox[{"\[Lambda]", "*", "B"}], ",",
       RowBox[{"B", "\[Distributed]",
        RowBox[{"BinomialDistribution", "[",
         RowBox[{"1", ",", "1"}], "]"}]}]}], "]"}]}], ";",
    RowBox[{"\[Nu]", "=",
     RowBox[{"Function", "[",
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "t"}], "]"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"cTemp", "=", "c"}], ";", "\[IndentingNewLine]",
    RowBox[{"dTemp", "=", "d"}], ";", "\[IndentingNewLine]",
    RowBox[{"ShapeFunctions", "=",
     RowBox[{"{",
      RowBox[{
       RowBox[{"{",
        RowBox[{"\"\<Polynomial\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"x", "^",
             RowBox[{"(", "dTemp", ")"}]}]}]}], "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"(",
             RowBox[{"x", "/", "cTemp"}], ")"}], "^",
            RowBox[{"(",
             RowBox[{"1", "/", "dTemp"}], ")"}]}]}], "]"}]}], "}"}], ",",
       RowBox[{"{",
        RowBox[{"\"\<Exponential\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"(",
             RowBox[{
              RowBox[{"Exp", "[",
               RowBox[{"dTemp", "*", "x"}], "]"}], "-", "1"}], ")"}]}]}],
          "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"Log", "[",
             RowBox[{
              RowBox[{"x", "/", "cTemp"}], "+", "1"}], "]"}], "/",
            "dTemp"}]}], "]"}]}], "}"}], ",",
       RowBox[{"{",
        RowBox[{"\"\<Logarithmic\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"Log", "[",
             RowBox[{"1", "+",
              RowBox[{"dTemp", "*", "x"}]}], "]"}]}]}], "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"(",
             RowBox[{
              RowBox[{"Exp", "[",
               RowBox[{"x", "/", "cTemp"}], "]"}], "-", "1"}], ")"}], "/",
            "dTemp"}]}], "]"}]}], "}"}]}], "}"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"h", "=",
     RowBox[{"ShapeFunctions", "[",
      RowBox[{"[",
       RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]",
    RowBox[{"Inverseh", "=",
     RowBox[{"ShapeFunctions", "[",
      RowBox[{"[",
       RowBox[{"k", ",", "3"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]",
    RowBox[{"PlotVarianceCMCAPMCrossingTimeMPTTUpperBoundary", "[",
     RowBox[{
     "W", ",", "\[Nu]", ",", "4", ",", "h", ",", "Inverseh", ",", "\[Beta]",
      ",", "16", ",", "Full"}], "]"}]}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"\[Lambda]", ",", "1", ",",
       RowBox[{"Style", "[",
        RowBox[{
        "\"\<Intensity of the Poisson process\>\"", ",", "Blue", ",", "14"}],
        "]"}]}], "}"}], ",", "1", ",", "5", ",",
     RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"\[Beta]", ",", "0", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<\[Beta]\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}],
     ",", "0", ",", "5", ",",
     RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"k", ",", "1", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Shape of boundary\>\"", ",", "Blue", ",", "14"}],
        "]"}]}], "}"}], ",",
     RowBox[{"Table", "[",
      RowBox[{
       RowBox[{"i", "\[Rule]",
        RowBox[{"Style", "[",
         RowBox[{
          RowBox[{"ShapeFunctions", "[",
           RowBox[{"[",
            RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", "Black", ",", "14"}],
         "]"}]}], ",",
       RowBox[{"{",
        RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}]}], "}"}],
   "\[IndentingNewLine]",
   RowBox[{"(*",
    RowBox[{
     RowBox[{
      RowBox[{",",
       RowBox[{"{",
        RowBox[{
         RowBox[{"{",
          RowBox[{"k", ",", "1", ",",
           RowBox[{"Style", "[",
            RowBox[{"\"\<Shape of boundary\>\"", ",", "Blue", ",", "14"}],
            "]"}]}], "}"}], ",", "\[IndentingNewLine]", ",",
         RowBox[{"{",
          RowBox[{"k", ",", "1", ",",
           RowBox[{"Length", "[", "ShapeFunctions", "]"}]}], "}"}]}]}]}],
      "]"}], "}"}], "*)"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"c", ",", "1", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<c\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
     "1", ",", "5", ",", "0.5"}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"d", ",", "0.5", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<d\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
     "0.5", ",", "2", ",", "0.5"}], "}"}]}], "\[IndentingNewLine]",
  "]"}]], "Input",
 CellChangeTimes->{{3.672465238404011*^9, 3.67246526142572*^9}, {
   3.672468437707714*^9, 3.672468438370599*^9}, {3.672484354611669*^9,
   3.67248435532747*^9}, 3.673192297903241*^9, {3.676611667131078*^9,
   3.676611703291848*^9}, {3.676611961999111*^9, 3.676612003765785*^9}, {
   3.6767157469244623`*^9, 3.676715791530325*^9}, {3.676715821925602*^9,
   3.676715877460898*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`c$$ = 2., $CellContext`d$$ =
    2., $CellContext`k$$ = 1, $CellContext`\[Beta]$$ =
    1, $CellContext`\[Lambda]$$ = 4, Typeset`show$$ = True,
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ =
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\[Lambda]$$], 1,
       Style["Intensity of the Poisson process",
        RGBColor[0, 0, 1], 14]}, 1, 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`\[Beta]$$], 0,
       Style["\[Beta]",
        RGBColor[0, 0, 1], 14]}, 0, 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`k$$], 1,
       Style["Shape of boundary",
        RGBColor[0, 0, 1], 14]}, {1 -> Style["Polynomial",
         GrayLevel[0], 14], 2 -> Style["Exponential",
         GrayLevel[0], 14], 3 -> Style["Logarithmic",
         GrayLevel[0], 14]}}, {{
       Hold[$CellContext`c$$], 1,
       Style["c",
        RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{
       Hold[$CellContext`d$$], 0.5,
       Style["d",
        RGBColor[0, 0, 1], 14]}, 0.5, 2, 0.5}}, Typeset`size$$ = {
    753., {194., 199.}}, Typeset`update$$ = 0, Typeset`initDone$$,
    Typeset`skipInitDone$$ = True, $CellContext`\[Lambda]$142000$$ =
    0, $CellContext`\[Beta]$142001$$ = 0, $CellContext`k$142002$$ =
    False, $CellContext`c$142003$$ = 0, $CellContext`d$142004$$ = 0},
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm,
      "Variables" :> {$CellContext`c$$ = 1, $CellContext`d$$ =
        0.5, $CellContext`k$$ = 1, $CellContext`\[Beta]$$ =
        0, $CellContext`\[Lambda]$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Lambda]$$, $CellContext`\[Lambda]$142000$$, 0],
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$142001$$, 0],
        Hold[$CellContext`k$$, $CellContext`k$142002$$, False],
        Hold[$CellContext`c$$, $CellContext`c$142003$$, 0],
        Hold[$CellContext`d$$, $CellContext`d$142004$$, 0]},
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$,
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$,
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$},
      "Body" :> ($CellContext`W =
        TransformedDistribution[$CellContext`\[Lambda]$$ $CellContext`B,
          Distributed[$CellContext`B,
           BinomialDistribution[1, 1]]]; $CellContext`\[Nu] =
        Function[{$CellContext`t}, $CellContext`t]; $CellContext`cTemp = \
$CellContext`c$$; $CellContext`dTemp = $CellContext`d$$; \
$CellContext`ShapeFunctions = {{"Polynomial",

           Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],

           Function[{$CellContext`x}, ($CellContext`x/$CellContext`cTemp)^(
             1/$CellContext`dTemp)]}, {"Exponential",

           Function[{$CellContext`x}, $CellContext`cTemp (
             Exp[$CellContext`dTemp $CellContext`x] - 1)],

           Function[{$CellContext`x},
            Log[$CellContext`x/$CellContext`cTemp + 1]/$CellContext`dTemp]}, {
          "Logarithmic",

           Function[{$CellContext`x}, $CellContext`cTemp
            Log[1 + $CellContext`dTemp $CellContext`x]],

           Function[{$CellContext`x}, (Exp[$CellContext`x/$CellContext`cTemp] -
             1)/$CellContext`dTemp]}}; $CellContext`h =
        Part[$CellContext`ShapeFunctions, $CellContext`k$$,
          2]; $CellContext`Inverseh =
        Part[$CellContext`ShapeFunctions, $CellContext`k$$,
          3]; $CellContext`PlotVarianceCMCAPMCrossingTimeMPTTUpperBoundary[$\
CellContext`W, $CellContext`\[Nu],
         4, $CellContext`h, $CellContext`Inverseh, $CellContext`\[Beta]$$, 16,
          Full]), "Specifications" :> {{{$CellContext`\[Lambda]$$, 1,
          Style["Intensity of the Poisson process",
           RGBColor[0, 0, 1], 14]}, 1, 5,
         Rational[1, 2]}, {{$CellContext`\[Beta]$$, 0,
          Style["\[Beta]",
           RGBColor[0, 0, 1], 14]}, 0, 5,
         Rational[1, 2]}, {{$CellContext`k$$, 1,
          Style["Shape of boundary",
           RGBColor[0, 0, 1], 14]}, {1 -> Style["Polynomial",
            GrayLevel[0], 14], 2 -> Style["Exponential",
            GrayLevel[0], 14], 3 -> Style["Logarithmic",
            GrayLevel[0], 14]}}, {{$CellContext`c$$, 1,
          Style["c",
           RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{$CellContext`d$$, 0.5,
          Style["d",
           RGBColor[0, 0, 1], 14]}, 0.5, 2, 0.5}}, "Options" :> {},
      "DefaultOptions" :> {}],
     ImageSizeCache->{798., {296., 301.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.67246524393176*^9, 3.672465268899933*^9},
   3.672468441789793*^9, 3.672484358222356*^9, 3.672492610144761*^9, {
   3.673192278618247*^9, 3.6731922998963203`*^9}, 3.676611575011693*^9,
   3.676612005597056*^9, {3.676715864421187*^9, 3.676715883494659*^9}}]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Variance reduction for mixed sample process", "Subsection",
 CellChangeTimes->{{3.67240738453019*^9, 3.672407395711698*^9}}],

Cell["\<\
The same study may be conducted for the mixed sample process. We consider \
hereafter a linear death process. Again the probability \
\[DoubleStruckCapitalP][U\[LessSlantEqual]N(t)\[LessSlantEqual]h(t)+U] gives \
insight on the variance reduction,\
\>", "Text",
 CellChangeTimes->{{3.672465469007009*^9, 3.672465492374793*^9}, {
  3.672483666199854*^9, 3.6724836960163*^9}, {3.6724837849134407`*^9,
  3.672483800305944*^9}, {3.676716264367491*^9, 3.676716297899109*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]",
  RowBox[{
   RowBox[{
    RowBox[{"Z", "=",
     RowBox[{"TransformedDistribution", "[",
      RowBox[{
       RowBox[{"z", "*", "B"}], ",",
       RowBox[{"B", "\[Distributed]",
        RowBox[{"BinomialDistribution", "[",
         RowBox[{"1", ",", "1"}], "]"}]}]}], "]"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"\[Mu]", "=",
     RowBox[{"Function", "[",
      RowBox[{
       RowBox[{"{", "t", "}"}], ",",
       RowBox[{"z",
        RowBox[{"(",
         RowBox[{"1", "-",
          RowBox[{"Exp", "[",
           RowBox[{
            RowBox[{"-", "b"}], "*", "t"}], "]"}]}], ")"}]}]}], "]"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"cTemp", "=", "c"}], ";", "\[IndentingNewLine]",
    RowBox[{"dTemp", "=", "d"}], ";", "\[IndentingNewLine]",
    RowBox[{"ShapeFunctions", "=",
     RowBox[{"{",
      RowBox[{
       RowBox[{"{",
        RowBox[{"\"\<Polynomial\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"x", "^",
             RowBox[{"(", "dTemp", ")"}]}]}]}], "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"(",
             RowBox[{"x", "/", "cTemp"}], ")"}], "^",
            RowBox[{"(",
             RowBox[{"1", "/", "dTemp"}], ")"}]}]}], "]"}]}], "}"}], ",",
       RowBox[{"{",
        RowBox[{"\"\<Exponential\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"(",
             RowBox[{
              RowBox[{"Exp", "[",
               RowBox[{"dTemp", "*", "x"}], "]"}], "-", "1"}], ")"}]}]}],
          "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"Log", "[",
             RowBox[{
              RowBox[{"x", "/", "cTemp"}], "+", "1"}], "]"}], "/",
            "dTemp"}]}], "]"}]}], "}"}], ",",
       RowBox[{"{",
        RowBox[{"\"\<Logarithmic\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"Log", "[",
             RowBox[{"1", "+",
              RowBox[{"dTemp", "*", "x"}]}], "]"}]}]}], "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"(",
             RowBox[{
              RowBox[{"Exp", "[",
               RowBox[{"x", "/", "cTemp"}], "]"}], "-", "1"}], ")"}], "/",
            "dTemp"}]}], "]"}]}], "}"}]}], "}"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"h", "=", "shape"}], ";", "\[IndentingNewLine]",
    RowBox[{"Plot", "[",
     RowBox[{
      RowBox[{"Sum", "[",
       RowBox[{
        RowBox[{"PDFMSP", "[",
         RowBox[{"Z", ",", "\[Mu]", ",", "z", ",", "n", ",", "t"}], "]"}],
        ",",
        RowBox[{"{",
         RowBox[{"n", ",",
          RowBox[{"Floor", "[", "\[Beta]", "]"}], ",",
          RowBox[{"Floor", "[",
           RowBox[{
            RowBox[{"h", "[", "t", "]"}], "+", "\[Beta]"}], "]"}], ",", "1"}],
          "}"}]}], "]"}], ",",
      RowBox[{"{",
       RowBox[{"t", ",",
        RowBox[{"1", "/", "10"}], ",", "4"}], "}"}], ",",
      RowBox[{"PlotRange", "\[Rule]", "All"}], ",",
      RowBox[{"PlotStyle", "\[Rule]", "Blue"}], ",",
      RowBox[{"ImageSize", "\[Rule]", "Large"}], ",",
      RowBox[{"LabelStyle", "\[Rule]",
       RowBox[{"Directive", "[",
        RowBox[{"Black", ",", "16"}], "]"}]}], ",",
      RowBox[{"AxesLabel", "\[Rule]",
       RowBox[{"{",
        RowBox[{"\"\<t\>\"", ",", "\"\<\>\""}], "}"}]}], ",",
      RowBox[{"Frame", "->", "True"}], ",",
      RowBox[{"FrameLabel", "\[Rule]",
       RowBox[{"{",
        RowBox[{
         RowBox[{"{",
          RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",",
         RowBox[{"{",
          RowBox[{
          "\"\<t\>\"", ",",
           "\"\<\[DoubleStruckCapitalP][\[Beta]\[LessSlantEqual]N(t)\
\[LessSlantEqual]h(t)+\[Beta]]\>\""}], "}"}]}], "}"}]}]}], "]"}]}],
   "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"z", ",", "5", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Size of the population\>\"", ",", "Blue", ",", "14"}],
        "]"}]}], "}"}], ",", "5", ",", "50", ",", "5"}], "}"}],
   "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"b", ",",
       RowBox[{"1", "/", "2"}], ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Death rate\>\"", ",", "Blue", ",", "14"}], "]"}]}],
      "}"}], ",",
     RowBox[{"1", "/", "2"}], ",", "5", ",",
     RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"\[Beta]", ",", "0", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<\[Beta]\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}],
     ",", "0", ",", "5", ",",
     RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"shape", ",",
       RowBox[{"ShapeFunctions", "[",
        RowBox[{"[",
         RowBox[{"1", ",", "2"}], "]"}], "]"}], ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Shape of boundary\>\"", ",", "Blue", ",", "14"}],
        "]"}]}], "}"}], ",", "\[IndentingNewLine]",
     RowBox[{"Table", "[",
      RowBox[{
       RowBox[{
        RowBox[{"ShapeFunctions", "[",
         RowBox[{"[",
          RowBox[{"k", ",", "2"}], "]"}], "]"}], "\[Rule]",
        RowBox[{"Style", "[",
         RowBox[{
          RowBox[{"ShapeFunctions", "[",
           RowBox[{"[",
            RowBox[{"k", ",", "1"}], "]"}], "]"}], ",", "Black", ",", "14"}],
         "]"}]}], ",",
       RowBox[{"{",
        RowBox[{"k", ",", "1", ",",
         RowBox[{"Length", "[", "ShapeFunctions", "]"}]}], "}"}]}], "]"}]}],
    "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"a", ",", "1", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<a\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
     "1", ",", "5", ",", "0.5"}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"b", ",", "0.5", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<b\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
     "0", ",", "2", ",", "0.5"}], "}"}]}], "\[IndentingNewLine]",
  "]"}]], "Input",
 CellChangeTimes->{
  3.6724838822940702`*^9, {3.672493129823592*^9, 3.672493131842149*^9}, {
   3.672495352587644*^9, 3.67249541835821*^9}, {3.6724954629358463`*^9,
   3.672495486742653*^9}, 3.672495532203178*^9, {3.672495651947503*^9,
   3.6724956638371677`*^9}, {3.676612403987567*^9, 3.676612439485738*^9}, {
   3.676612473791453*^9, 3.676612527470228*^9}, {3.676613458623938*^9,
   3.676613462806403*^9}, {3.676716308528974*^9, 3.676716383360379*^9}, {
   3.67671641893974*^9, 3.676716498529242*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 1, $CellContext`b$$ =
    0.5, $CellContext`shape$$ =
    Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp], $CellContext`z$$ =
    5, $CellContext`\[Beta]$$ = 0, Typeset`show$$ = True,
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ =
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`z$$], 5,
       Style["Size of the population",
        RGBColor[0, 0, 1], 14]}, 5, 50, 5}, {{
       Hold[$CellContext`b$$],
       Rational[1, 2],
       Style["Death rate",
        RGBColor[0, 0, 1], 14]},
      Rational[1, 2], 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`\[Beta]$$], 0,
       Style["\[Beta]",
        RGBColor[0, 0, 1], 14]}, 0, 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`shape$$],
       Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],
       Style["Shape of boundary",
        RGBColor[0, 0, 1], 14]}, {
      Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp] -> Style["Polynomial",
         GrayLevel[0], 14],
       Function[{$CellContext`x}, $CellContext`cTemp (
          Exp[$CellContext`dTemp $CellContext`x] - 1)] -> Style["Exponential",
         GrayLevel[0], 14],
       Function[{$CellContext`x}, $CellContext`cTemp
         Log[1 + $CellContext`dTemp $CellContext`x]] -> Style["Logarithmic",
         GrayLevel[0], 14]}}, {{
       Hold[$CellContext`a$$], 1,
       Style["a",
        RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{
       Hold[$CellContext`b$$], 0.5,
       Style["b",
        RGBColor[0, 0, 1], 14]}, 0, 2, 0.5}}, Typeset`size$$ = {
    576., {192., 196.}}, Typeset`update$$ = 0, Typeset`initDone$$,
    Typeset`skipInitDone$$ = True, $CellContext`z$273407$$ =
    0, $CellContext`b$273408$$ = 0, $CellContext`\[Beta]$273409$$ =
    0, $CellContext`shape$273410$$ = False, $CellContext`a$273411$$ = 0},
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm,
      "Variables" :> {$CellContext`a$$ = 1, $CellContext`b$$ =
        0.5, $CellContext`shape$$ =
        Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp], $CellContext`z$$ =
        5, $CellContext`\[Beta]$$ = 0}, "ControllerVariables" :> {
        Hold[$CellContext`z$$, $CellContext`z$273407$$, 0],
        Hold[$CellContext`b$$, $CellContext`b$273408$$, 0],
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$273409$$, 0],
        Hold[$CellContext`shape$$, $CellContext`shape$273410$$, False],
        Hold[$CellContext`a$$, $CellContext`a$273411$$, 0]},
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$,
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$,
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$},
      "Body" :> ($CellContext`Z =
        TransformedDistribution[$CellContext`z$$ $CellContext`B,
          Distributed[$CellContext`B,
           BinomialDistribution[1, 1]]]; $CellContext`\[Mu] =
        Function[{$CellContext`t$}, $CellContext`z$$ (1 -
           Exp[(-$CellContext`b$$) $CellContext`t$])]; $CellContext`cTemp = \
$CellContext`c; $CellContext`dTemp = $CellContext`d; \
$CellContext`ShapeFunctions = {{"Polynomial",

           Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],

           Function[{$CellContext`x}, ($CellContext`x/$CellContext`cTemp)^(
             1/$CellContext`dTemp)]}, {"Exponential",

           Function[{$CellContext`x}, $CellContext`cTemp (
             Exp[$CellContext`dTemp $CellContext`x] - 1)],

           Function[{$CellContext`x},
            Log[$CellContext`x/$CellContext`cTemp + 1]/$CellContext`dTemp]}, {
          "Logarithmic",

           Function[{$CellContext`x}, $CellContext`cTemp
            Log[1 + $CellContext`dTemp $CellContext`x]],
           Function[{$CellContext`x}, (Exp[$CellContext`x/$CellContext`cTemp] -
             1)/$CellContext`dTemp]}}; $CellContext`h = $CellContext`shape$$;
       Plot[
         Sum[
          $CellContext`PDFMSP[$CellContext`Z, $CellContext`\[Mu], \
$CellContext`z$$, $CellContext`n, $CellContext`t], {$CellContext`n,
           Floor[$CellContext`\[Beta]$$],
           Floor[$CellContext`h[$CellContext`t] + $CellContext`\[Beta]$$],
           1}], {$CellContext`t, 1/10, 4}, PlotRange -> All, PlotStyle ->
         Blue, ImageSize -> Large, LabelStyle -> Directive[Black, 16],
         AxesLabel -> {"t", ""}, Frame -> True,
         FrameLabel -> {{"", ""}, {
           "t", "\[DoubleStruckCapitalP][\[Beta]\[LessSlantEqual]N(t)\
\[LessSlantEqual]h(t)+\[Beta]]"}}]),
      "Specifications" :> {{{$CellContext`z$$, 5,
          Style["Size of the population",
           RGBColor[0, 0, 1], 14]}, 5, 50, 5}, {{$CellContext`b$$,
          Rational[1, 2],
          Style["Death rate",
           RGBColor[0, 0, 1], 14]},
         Rational[1, 2], 5,
         Rational[1, 2]}, {{$CellContext`\[Beta]$$, 0,
          Style["\[Beta]",
           RGBColor[0, 0, 1], 14]}, 0, 5,
         Rational[1, 2]}, {{$CellContext`shape$$,

          Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],
          Style["Shape of boundary",
           RGBColor[0, 0, 1], 14]}, {
         Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp] -> Style["Polynomial",
            GrayLevel[0], 14],
          Function[{$CellContext`x}, $CellContext`cTemp (
             Exp[$CellContext`dTemp $CellContext`x] - 1)] ->
          Style["Exponential",
            GrayLevel[0], 14],
          Function[{$CellContext`x}, $CellContext`cTemp
            Log[1 + $CellContext`dTemp $CellContext`x]] ->
          Style["Logarithmic",
            GrayLevel[0], 14]}}, {{$CellContext`a$$, 1,
          Style["a",
           RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{$CellContext`b$$, 0.5,
          Style["b",
           RGBColor[0, 0, 1], 14]}, 0, 2, 0.5}}, "Options" :> {},
      "DefaultOptions" :> {}],
     ImageSizeCache->{621., {307., 312.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.672483884606917*^9, 3.67248447848635*^9, 3.6724927512681503`*^9,
   3.672493135466319*^9, 3.6724955366513243`*^9, {3.672495658091049*^9,
   3.6724956693602858`*^9}, 3.672495700084509*^9, {3.6731923749968777`*^9,
   3.673192399829273*^9}, 3.676612530613275*^9, 3.6766134683998747`*^9, {
   3.67671648420784*^9, 3.676716502174081*^9}}]
}, {2}]],

Cell["And of course the impact on the reduction of variance,", "Text",
 CellChangeTimes->{{3.672484630964856*^9, 3.672484643372863*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]",
  RowBox[{
   RowBox[{
    RowBox[{"Z", "=",
     RowBox[{"TransformedDistribution", "[",
      RowBox[{
       RowBox[{"z", "*", "B"}], ",",
       RowBox[{"B", "\[Distributed]",
        RowBox[{"BinomialDistribution", "[",
         RowBox[{"1", ",", "1"}], "]"}]}]}], "]"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"\[Mu]", "=",
     RowBox[{"Function", "[",
      RowBox[{
       RowBox[{"{", "t", "}"}], ",",
       RowBox[{"z",
        RowBox[{"(",
         RowBox[{"1", "-",
          RowBox[{"Exp", "[",
           RowBox[{
            RowBox[{"-", "b"}], "*", "t"}], "]"}]}], ")"}]}]}], "]"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"cTemp", "=", "c"}], ";", "\[IndentingNewLine]",
    RowBox[{"dTemp", "=", "d"}], ";", "\[IndentingNewLine]",
    RowBox[{"ShapeFunctions", "=",
     RowBox[{"{",
      RowBox[{
       RowBox[{"{",
        RowBox[{"\"\<Polynomial\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"x", "^",
             RowBox[{"(", "dTemp", ")"}]}]}]}], "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"(",
             RowBox[{"x", "/", "cTemp"}], ")"}], "^",
            RowBox[{"(",
             RowBox[{"1", "/", "dTemp"}], ")"}]}]}], "]"}]}], "}"}], ",",
       RowBox[{"{",
        RowBox[{"\"\<Exponential\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"(",
             RowBox[{
              RowBox[{"Exp", "[",
               RowBox[{"dTemp", "*", "x"}], "]"}], "-", "1"}], ")"}]}]}],
          "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"Log", "[",
             RowBox[{
              RowBox[{"x", "/", "cTemp"}], "+", "1"}], "]"}], "/",
            "dTemp"}]}], "]"}]}], "}"}], ",",
       RowBox[{"{",
        RowBox[{"\"\<Logarithmic\>\"", ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{"cTemp", "*",
            RowBox[{"Log", "[",
             RowBox[{"1", "+",
              RowBox[{"dTemp", "*", "x"}]}], "]"}]}]}], "]"}], ",",
         RowBox[{"Function", "[",
          RowBox[{
           RowBox[{"{", "x", "}"}], ",",
           RowBox[{
            RowBox[{"(",
             RowBox[{
              RowBox[{"Exp", "[",
               RowBox[{"x", "/", "cTemp"}], "]"}], "-", "1"}], ")"}], "/",
            "dTemp"}]}], "]"}]}], "}"}]}], "}"}]}], ";",
    "\[IndentingNewLine]",
    RowBox[{"h", "=",
     RowBox[{"ShapeFunctions", "[",
      RowBox[{"[",
       RowBox[{"k", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]",
    RowBox[{"Inverseh", "=",
     RowBox[{"ShapeFunctions", "[",
      RowBox[{"[",
       RowBox[{"k", ",", "3"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]",
    RowBox[{"PlotVarianceCMCAPMCrossingTimeMSPUpperBoundary", "[",
     RowBox[{
     "Z", ",", "\[Mu]", ",", "z", ",", "4", ",", "h", ",", "Inverseh", ",",
      "\[Beta]", ",", "16", ",", "Full"}], "]"}]}], "\[IndentingNewLine]",
   ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"z", ",", "5", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Size of the population\>\"", ",", "Blue", ",", "14"}],
        "]"}]}], "}"}], ",", "5", ",", "50", ",", "5"}], "}"}],
   "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"b", ",",
       RowBox[{"1", "/", "2"}], ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Death rate\>\"", ",", "Blue", ",", "14"}], "]"}]}],
      "}"}], ",",
     RowBox[{"1", "/", "2"}], ",", "5", ",",
     RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"\[Beta]", ",", "0", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<\[Beta]\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}],
     ",", "0", ",", "5", ",",
     RowBox[{"1", "/", "2"}]}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"k", ",", "1", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<Shape of boundary\>\"", ",", "Blue", ",", "14"}],
        "]"}]}], "}"}], ",",
     RowBox[{"Table", "[",
      RowBox[{
       RowBox[{"i", "\[Rule]",
        RowBox[{"Style", "[",
         RowBox[{
          RowBox[{"ShapeFunctions", "[",
           RowBox[{"[",
            RowBox[{"i", ",", "1"}], "]"}], "]"}], ",", "Black", ",", "14"}],
         "]"}]}], ",",
       RowBox[{"{",
        RowBox[{"i", ",", "1", ",", "3"}], "}"}]}], "]"}]}], "}"}],
   "\[IndentingNewLine]",
   RowBox[{"(*",
    RowBox[{
     RowBox[{
      RowBox[{",",
       RowBox[{"{",
        RowBox[{
         RowBox[{"{",
          RowBox[{"k", ",", "1", ",",
           RowBox[{"Style", "[",
            RowBox[{"\"\<Shape of boundary\>\"", ",", "Blue", ",", "14"}],
            "]"}]}], "}"}], ",", "\[IndentingNewLine]", ",",
         RowBox[{"{",
          RowBox[{"k", ",", "1", ",",
           RowBox[{"Length", "[", "ShapeFunctions", "]"}]}], "}"}]}]}]}],
      "]"}], "}"}], "*)"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"a", ",", "1", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<a\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
     "1", ",", "5", ",", "0.5"}], "}"}], "\[IndentingNewLine]", ",",
   RowBox[{"{",
    RowBox[{
     RowBox[{"{",
      RowBox[{"b", ",", "0.5", ",",
       RowBox[{"Style", "[",
        RowBox[{"\"\<b\>\"", ",", "Blue", ",", "14"}], "]"}]}], "}"}], ",",
     "0.5", ",", "2", ",", "0.5"}], "}"}]}], "\[IndentingNewLine]",
  "]"}]], "Input",
 CellChangeTimes->{{3.67248394833496*^9, 3.6724839610100317`*^9}, {
  3.676612607130777*^9, 3.676612642797068*^9}, {3.676612726634885*^9,
  3.676612751183199*^9}, {3.676716512149572*^9, 3.676716565782008*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 1, $CellContext`b$$ =
    0.5, $CellContext`k$$ = 1, $CellContext`z$$ = 5, $CellContext`\[Beta]$$ =
    0, Typeset`show$$ = True, Typeset`bookmarkList$$ = {},
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ =
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`z$$], 5,
       Style["Size of the population",
        RGBColor[0, 0, 1], 14]}, 5, 50, 5}, {{
       Hold[$CellContext`b$$],
       Rational[1, 2],
       Style["Death rate",
        RGBColor[0, 0, 1], 14]},
      Rational[1, 2], 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`\[Beta]$$], 0,
       Style["\[Beta]",
        RGBColor[0, 0, 1], 14]}, 0, 5,
      Rational[1, 2]}, {{
       Hold[$CellContext`k$$], 1,
       Style["Shape of boundary",
        RGBColor[0, 0, 1], 14]}, {1 -> Style["Polynomial",
         GrayLevel[0], 14], 2 -> Style["Exponential",
         GrayLevel[0], 14], 3 -> Style["Logarithmic",
         GrayLevel[0], 14]}}, {{
       Hold[$CellContext`a$$], 1,
       Style["a",
        RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{
       Hold[$CellContext`b$$], 0.5,
       Style["b",
        RGBColor[0, 0, 1], 14]}, 0.5, 2, 0.5}}, Typeset`size$$ = {
    753., {194., 199.}}, Typeset`update$$ = 0, Typeset`initDone$$,
    Typeset`skipInitDone$$ = True, $CellContext`z$300049$$ =
    0, $CellContext`b$300050$$ = 0, $CellContext`\[Beta]$300051$$ =
    0, $CellContext`k$300052$$ = False, $CellContext`a$300053$$ = 0},
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm,
      "Variables" :> {$CellContext`a$$ = 1, $CellContext`b$$ =
        0.5, $CellContext`k$$ = 1, $CellContext`z$$ =
        5, $CellContext`\[Beta]$$ = 0}, "ControllerVariables" :> {
        Hold[$CellContext`z$$, $CellContext`z$300049$$, 0],
        Hold[$CellContext`b$$, $CellContext`b$300050$$, 0],
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$300051$$, 0],
        Hold[$CellContext`k$$, $CellContext`k$300052$$, False],
        Hold[$CellContext`a$$, $CellContext`a$300053$$, 0]},
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$,
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$,
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$},
      "Body" :> ($CellContext`Z =
        TransformedDistribution[$CellContext`z$$ $CellContext`B,
          Distributed[$CellContext`B,
           BinomialDistribution[1, 1]]]; $CellContext`\[Mu] =
        Function[{$CellContext`t$}, $CellContext`z$$ (1 -
           Exp[(-$CellContext`b$$) $CellContext`t$])]; $CellContext`cTemp = \
$CellContext`c; $CellContext`dTemp = $CellContext`d; \
$CellContext`ShapeFunctions = {{"Polynomial",

           Function[{$CellContext`x}, $CellContext`cTemp \
$CellContext`x^$CellContext`dTemp],

           Function[{$CellContext`x}, ($CellContext`x/$CellContext`cTemp)^(
             1/$CellContext`dTemp)]}, {"Exponential",

           Function[{$CellContext`x}, $CellContext`cTemp (
             Exp[$CellContext`dTemp $CellContext`x] - 1)],

           Function[{$CellContext`x},
            Log[$CellContext`x/$CellContext`cTemp + 1]/$CellContext`dTemp]}, {
          "Logarithmic",

           Function[{$CellContext`x}, $CellContext`cTemp
            Log[1 + $CellContext`dTemp $CellContext`x]],

           Function[{$CellContext`x}, (Exp[$CellContext`x/$CellContext`cTemp] -
             1)/$CellContext`dTemp]}}; $CellContext`h =
        Part[$CellContext`ShapeFunctions, $CellContext`k$$,
          2]; $CellContext`Inverseh =
        Part[$CellContext`ShapeFunctions, $CellContext`k$$,
          3]; $CellContext`PlotVarianceCMCAPMCrossingTimeMSPUpperBoundary[$\
CellContext`Z, $CellContext`\[Mu], $CellContext`z$$,
         4, $CellContext`h, $CellContext`Inverseh, $CellContext`\[Beta]$$, 16,
          Full]), "Specifications" :> {{{$CellContext`z$$, 5,
          Style["Size of the population",
           RGBColor[0, 0, 1], 14]}, 5, 50, 5}, {{$CellContext`b$$,
          Rational[1, 2],
          Style["Death rate",
           RGBColor[0, 0, 1], 14]},
         Rational[1, 2], 5,
         Rational[1, 2]}, {{$CellContext`\[Beta]$$, 0,
          Style["\[Beta]",
           RGBColor[0, 0, 1], 14]}, 0, 5,
         Rational[1, 2]}, {{$CellContext`k$$, 1,
          Style["Shape of boundary",
           RGBColor[0, 0, 1], 14]}, {1 -> Style["Polynomial",
            GrayLevel[0], 14], 2 -> Style["Exponential",
            GrayLevel[0], 14], 3 -> Style["Logarithmic",
            GrayLevel[0], 14]}}, {{$CellContext`a$$, 1,
          Style["a",
           RGBColor[0, 0, 1], 14]}, 1, 5, 0.5}, {{$CellContext`b$$, 0.5,
          Style["b",
           RGBColor[0, 0, 1], 14]}, 0.5, 2, 0.5}}, "Options" :> {},
      "DefaultOptions" :> {}],
     ImageSizeCache->{798., {310., 315.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.672483952653676*^9, 3.672483966089716*^9},
   3.67249297000178*^9, 3.6724957616576357`*^9, 3.6731924327054358`*^9,
   3.676612752543502*^9, {3.676716557066909*^9, 3.67671656935262*^9}}]
}, {2}]],

Cell[BoxData[""], "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{770, 855},
WindowMargins->{{Automatic, -40}, {Automatic, 6}},
FrontEndVersion->"10.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (October 9, \
2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 138, 1, 148, "Title"],
Cell[721, 25, 264, 5, 51, "Subtitle"],
Cell[988, 32, 257, 5, 29, "Subsubtitle"],
Cell[CellGroupData[{
Cell[1270, 41, 108, 1, 64, "Section"],
Cell[1381, 44, 559, 13, 53, "Text"],
Cell[CellGroupData[{
Cell[1965, 61, 1314, 35, 38, "Subsubsection"],
Cell[3282, 98, 418, 7, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3737, 110, 572, 17, 47, "Subsubsection"],
Cell[4312, 129, 561, 9, 87, "Text"],
Cell[4876, 140, 105, 1, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5018, 146, 398, 12, 35, "Subsubsection"],
Cell[5419, 160, 348, 6, 49, "Text"],
Cell[5770, 168, 554, 11, 72, "Text"],
Cell[6327, 181, 1164, 24, 157, "Input"],
Cell[7494, 207, 171, 2, 30, "Text"],
Cell[7668, 211, 520, 14, 74, "Input"],
Cell[8191, 227, 275, 3, 30, "Text"],
Cell[8469, 232, 1051, 25, 74, "Input"],
Cell[9523, 259, 99, 1, 30, "Text"],
Cell[9625, 262, 412, 8, 28, "Input"],
Cell[10040, 272, 165, 2, 30, "Text"],
Cell[10208, 276, 259, 6, 28, "Input"],
Cell[10470, 284, 111, 1, 30, "Text"],
Cell[10584, 287, 159, 4, 28, "Input"],
Cell[10746, 293, 254, 5, 30, "Text"],
Cell[CellGroupData[{
Cell[11025, 302, 1061, 21, 63, "Input"],
Cell[12089, 325, 18829, 321, 403, "Output"]
}, Open  ]],
Cell[30933, 649, 157, 2, 30, "Text"],
Cell[CellGroupData[{
Cell[31115, 655, 209, 3, 28, "Item"],
Cell[31327, 660, 189, 2, 28, "Item"],
Cell[31519, 664, 234, 3, 28, "Item"]
}, Open  ]],
Cell[31768, 670, 4201, 132, 141, "Text"],
Cell[35972, 804, 866, 17, 74, "Input"],
Cell[36841, 823, 1706, 44, 76, "Text"],
Cell[CellGroupData[{
Cell[38572, 871, 321, 7, 42, "Input"],
Cell[38896, 880, 183, 2, 28, "Output"]
}, Open  ]],
Cell[39094, 885, 130, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[39249, 890, 277, 6, 42, "Input"],
Cell[39529, 898, 186, 2, 28, "Output"]
}, Open  ]],
Cell[39730, 903, 123, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[39878, 908, 276, 6, 42, "Input"],
Cell[40157, 916, 160, 2, 28, "Output"]
}, Open  ]],
Cell[40332, 921, 527, 9, 106, "Text"],
Cell[CellGroupData[{
Cell[40884, 934, 1934, 46, 170, "Input"],
Cell[42821, 982, 17709, 306, 395, "Output"]
}, Open  ]],
Cell[60545, 1291, 479, 13, 73, "Text"],
Cell[CellGroupData[{
Cell[61049, 1308, 912, 17, 91, "Input"],
Cell[61964, 1327, 81481, 1430, 347, "Output"]
}, Open  ]],
Cell[143460, 2760, 307, 6, 49, "Text"],
Cell[CellGroupData[{
Cell[143792, 2770, 524, 10, 42, "Input"],
Cell[144319, 2782, 311, 4, 28, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144667, 2791, 1469, 30, 129, "Input"],
Cell[146139, 2823, 668, 15, 145, "Output"]
}, Open  ]],
Cell[146822, 2841, 1125, 17, 182, "Text"],
Cell[CellGroupData[{
Cell[147972, 2862, 1984, 59, 219, "Input"],
Cell[149959, 2923, 2057, 61, 109, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[152065, 2990, 166, 3, 44, "Subsection"],
Cell[152234, 2995, 470, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[152729, 3007, 6879, 177, 594, "Input"],
Cell[159611, 3186, 6902, 143, 602, "Output"]
}, {2}]],
Cell[166525, 3332, 137, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[166687, 3337, 5925, 158, 532, "Input"],
Cell[172615, 3497, 5440, 111, 614, "Output"]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[178101, 3614, 130, 1, 44, "Subsection"],
Cell[178234, 3617, 481, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[178740, 3629, 7269, 195, 641, "Input"],
Cell[186012, 3826, 7097, 151, 636, "Output"]
}, {2}]],
Cell[193121, 3980, 136, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[193282, 3985, 6266, 172, 596, "Input"],
Cell[199551, 4159, 5655, 119, 642, "Output"]
}, {2}]],
Cell[205218, 4281, 26, 0, 28, "Input"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
